{"ast":null,"code":"import apiClient from '../clients/apiClient';\n\n/**\n * Cache health check response interface\n */\n\n/**\n * Cache health check result with additional metadata\n */\n\n/**\n * Utility function to check the health of the Redis cache\n * Calls GET /api/v1/cache/health endpoint and returns cache status information\n * \n * @returns Promise<CacheHealthResult> - Cache health check result with status and metadata\n * \n * @example\n * ```typescript\n * const cacheResult = await checkCacheHealth();\n * if (cacheResult.isConnected) {\n *   console.log('Cache is connected:', cacheResult.response);\n * } else {\n *   console.error('Cache health check failed:', cacheResult.error);\n * }\n * ```\n */\nexport const checkCacheHealth = async () => {\n  const startTime = Date.now();\n  const timestamp = new Date();\n  try {\n    const response = await apiClient.get('/api/v1/cache/health');\n    const responseTime = Date.now() - startTime;\n    return {\n      isConnected: response.status === 'connected',\n      response,\n      responseTime,\n      timestamp\n    };\n  } catch (error) {\n    const responseTime = Date.now() - startTime;\n\n    // Extract meaningful error message\n    let errorMessage = 'Cache health check failed';\n    if (error.response) {\n      // Server responded with error status\n      errorMessage = `Cache API returned ${error.response.status}: ${error.response.statusText}`;\n    } else if (error.request) {\n      // Request was made but no response received\n      errorMessage = 'No response from cache health endpoint';\n    } else {\n      // Something else happened\n      errorMessage = error.message || 'Unknown cache health check error';\n    }\n    return {\n      isConnected: false,\n      error: errorMessage,\n      responseTime,\n      timestamp\n    };\n  }\n};\n\n/**\n * Utility function to perform periodic cache health checks\n * Useful for continuous monitoring of cache status\n * \n * @param intervalMs - Interval in milliseconds between health checks (default: 30000ms = 30s)\n * @param onStatusChange - Callback function called when cache status changes\n * @returns Function to stop the periodic health checks\n * \n * @example\n * ```typescript\n * const stopCacheCheck = startPeriodicCacheHealthCheck(15000, (result) => {\n *   console.log('Cache status:', result.isConnected ? 'Connected' : 'Disconnected');\n * });\n * \n * // Stop monitoring after some time\n * setTimeout(() => stopCacheCheck(), 60000);\n * ```\n */\nexport const startPeriodicCacheHealthCheck = (intervalMs = 30000, onStatusChange) => {\n  let lastConnectionStatus = null;\n  const performCheck = async () => {\n    try {\n      const result = await checkCacheHealth();\n\n      // Call callback if connection status changed or if it's the first check\n      if (onStatusChange && (lastConnectionStatus === null || lastConnectionStatus !== result.isConnected)) {\n        onStatusChange(result);\n      }\n      lastConnectionStatus = result.isConnected;\n    } catch (error) {\n      console.error('Periodic cache health check error:', error);\n    }\n  };\n\n  // Perform initial check\n  performCheck();\n\n  // Set up interval\n  const intervalId = setInterval(performCheck, intervalMs);\n\n  // Return cleanup function\n  return () => {\n    clearInterval(intervalId);\n  };\n};\n\n/**\n * Format cache health check result for display purposes\n * Useful for status displays or debugging panels\n * \n * @param result - Cache health check result to format\n * @returns Formatted string representation of the cache status\n */\nexport const formatCacheStatus = result => {\n  const status = result.isConnected ? 'ðŸŸ¢ Connected' : 'ðŸ”´ Disconnected';\n  const responseTime = `${result.responseTime}ms`;\n  const timestamp = result.timestamp.toLocaleTimeString();\n  if (result.isConnected && result.response) {\n    const memory = result.response.memory ? ` | Memory: ${result.response.memory.percentage}%` : '';\n    const hitRate = result.response.stats ? ` | Hit Rate: ${(result.response.stats.hitRate * 100).toFixed(1)}%` : '';\n    return `${status} | Response: ${responseTime} | ${timestamp}${memory}${hitRate}`;\n  } else {\n    return `${status} | Response: ${responseTime} | ${timestamp} | Error: ${result.error}`;\n  }\n};","map":{"version":3,"names":["apiClient","checkCacheHealth","startTime","Date","now","timestamp","response","get","responseTime","isConnected","status","error","errorMessage","statusText","request","message","startPeriodicCacheHealthCheck","intervalMs","onStatusChange","lastConnectionStatus","performCheck","result","console","intervalId","setInterval","clearInterval","formatCacheStatus","toLocaleTimeString","memory","percentage","hitRate","stats","toFixed"],"sources":["/mnt/c/Users/HP/Smart-Doctor-Booking-Reminder-App/frontend/src/api/health/cacheHealthCheck.ts"],"sourcesContent":["import apiClient from '../clients/apiClient';\n\n/**\n * Cache health check response interface\n */\nexport interface CacheHealthResponse {\n  status: 'connected' | 'disconnected';\n  timestamp: string;\n  responseTime?: number;\n  cacheType?: string;\n  version?: string;\n  memory?: {\n    used: number;\n    total: number;\n    percentage: number;\n  };\n  connections?: {\n    active: number;\n    total: number;\n  };\n  stats?: {\n    hits: number;\n    misses: number;\n    hitRate: number;\n  };\n}\n\n/**\n * Cache health check result with additional metadata\n */\nexport interface CacheHealthResult {\n  isConnected: boolean;\n  response?: CacheHealthResponse;\n  error?: string;\n  responseTime: number;\n  timestamp: Date;\n}\n\n/**\n * Utility function to check the health of the Redis cache\n * Calls GET /api/v1/cache/health endpoint and returns cache status information\n * \n * @returns Promise<CacheHealthResult> - Cache health check result with status and metadata\n * \n * @example\n * ```typescript\n * const cacheResult = await checkCacheHealth();\n * if (cacheResult.isConnected) {\n *   console.log('Cache is connected:', cacheResult.response);\n * } else {\n *   console.error('Cache health check failed:', cacheResult.error);\n * }\n * ```\n */\nexport const checkCacheHealth = async (): Promise<CacheHealthResult> => {\n  const startTime = Date.now();\n  const timestamp = new Date();\n\n  try {\n    const response = await apiClient.get<CacheHealthResponse>('/api/v1/cache/health');\n    const responseTime = Date.now() - startTime;\n\n    return {\n      isConnected: response.status === 'connected',\n      response,\n      responseTime,\n      timestamp\n    };\n  } catch (error: any) {\n    const responseTime = Date.now() - startTime;\n    \n    // Extract meaningful error message\n    let errorMessage = 'Cache health check failed';\n    \n    if (error.response) {\n      // Server responded with error status\n      errorMessage = `Cache API returned ${error.response.status}: ${error.response.statusText}`;\n    } else if (error.request) {\n      // Request was made but no response received\n      errorMessage = 'No response from cache health endpoint';\n    } else {\n      // Something else happened\n      errorMessage = error.message || 'Unknown cache health check error';\n    }\n\n    return {\n      isConnected: false,\n      error: errorMessage,\n      responseTime,\n      timestamp\n    };\n  }\n};\n\n/**\n * Utility function to perform periodic cache health checks\n * Useful for continuous monitoring of cache status\n * \n * @param intervalMs - Interval in milliseconds between health checks (default: 30000ms = 30s)\n * @param onStatusChange - Callback function called when cache status changes\n * @returns Function to stop the periodic health checks\n * \n * @example\n * ```typescript\n * const stopCacheCheck = startPeriodicCacheHealthCheck(15000, (result) => {\n *   console.log('Cache status:', result.isConnected ? 'Connected' : 'Disconnected');\n * });\n * \n * // Stop monitoring after some time\n * setTimeout(() => stopCacheCheck(), 60000);\n * ```\n */\nexport const startPeriodicCacheHealthCheck = (\n  intervalMs: number = 30000,\n  onStatusChange?: (result: CacheHealthResult) => void\n): (() => void) => {\n  let lastConnectionStatus: boolean | null = null;\n  \n  const performCheck = async () => {\n    try {\n      const result = await checkCacheHealth();\n      \n      // Call callback if connection status changed or if it's the first check\n      if (onStatusChange && (lastConnectionStatus === null || lastConnectionStatus !== result.isConnected)) {\n        onStatusChange(result);\n      }\n      \n      lastConnectionStatus = result.isConnected;\n    } catch (error) {\n      console.error('Periodic cache health check error:', error);\n    }\n  };\n\n  // Perform initial check\n  performCheck();\n  \n  // Set up interval\n  const intervalId = setInterval(performCheck, intervalMs);\n  \n  // Return cleanup function\n  return () => {\n    clearInterval(intervalId);\n  };\n};\n\n/**\n * Format cache health check result for display purposes\n * Useful for status displays or debugging panels\n * \n * @param result - Cache health check result to format\n * @returns Formatted string representation of the cache status\n */\nexport const formatCacheStatus = (result: CacheHealthResult): string => {\n  const status = result.isConnected ? 'ðŸŸ¢ Connected' : 'ðŸ”´ Disconnected';\n  const responseTime = `${result.responseTime}ms`;\n  const timestamp = result.timestamp.toLocaleTimeString();\n  \n  if (result.isConnected && result.response) {\n    const memory = result.response.memory ? ` | Memory: ${result.response.memory.percentage}%` : '';\n    const hitRate = result.response.stats ? ` | Hit Rate: ${(result.response.stats.hitRate * 100).toFixed(1)}%` : '';\n    return `${status} | Response: ${responseTime} | ${timestamp}${memory}${hitRate}`;\n  } else {\n    return `${status} | Response: ${responseTime} | ${timestamp} | Error: ${result.error}`;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}