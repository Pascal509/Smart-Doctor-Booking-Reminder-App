{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { ApiError } from '../types/api';\n\n/**\n * Custom hook for managing doctors data with loading and error states\n */\n\nexport function useDoctors() {\n  _s();\n  const [doctors, setDoctors] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchDoctors = useCallback(async specialtyId => {\n    setLoading(true);\n    setError(null);\n    try {\n      const doctorsData = await fetchDoctorsBySpecialty(specialtyId);\n      setDoctors(doctorsData);\n    } catch (err) {\n      if (err instanceof ApiError) {\n        // Handle specific API errors\n        switch (err.status) {\n          case 404:\n            setError(`No doctors found for the selected specialty.`);\n            setDoctors([]); // Clear previous results\n            break;\n          case 401:\n            setError('Authentication required. Please log in.');\n            break;\n          case 403:\n            setError('Access denied. You do not have permission to view this data.');\n            break;\n          case 500:\n            setError('Server error. Please try again later.');\n            break;\n          case 0:\n            setError('Network error. Please check your internet connection.');\n            break;\n          default:\n            setError(err.message || 'An unexpected error occurred.');\n        }\n      } else {\n        setError('An unexpected error occurred. Please try again.');\n      }\n      console.error('Error fetching doctors:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n  return {\n    doctors,\n    loading,\n    error,\n    fetchDoctors,\n    clearError\n  };\n}\n\n/**\n * Hook for fetching doctors by specialty with automatic loading on mount\n */\n_s(useDoctors, \"XKX/gnFDkX6Adl987AdCq4+94Cc=\");\nexport function useDoctorsBySpecialty(specialtyId) {\n  _s2();\n  const doctorsState = useDoctors();\n  useEffect(() => {\n    if (specialtyId && specialtyId > 0) {\n      doctorsState.fetchDoctors(specialtyId);\n    }\n  }, [specialtyId, doctorsState.fetchDoctors]);\n  return doctorsState;\n}\n_s2(useDoctorsBySpecialty, \"1zE2lPnip9kgAbRZrfh6St/Vdm0=\", false, function () {\n  return [useDoctors];\n});","map":{"version":3,"names":["useState","useEffect","useCallback","ApiError","useDoctors","_s","doctors","setDoctors","loading","setLoading","error","setError","fetchDoctors","specialtyId","doctorsData","fetchDoctorsBySpecialty","err","status","message","console","clearError","useDoctorsBySpecialty","_s2","doctorsState"],"sources":["C:/Users/HP/Smart-Doctor-Booking-Reminder-App/frontend/src/hooks/useDoctors.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { Doctor, ApiError } from '../types/api';\nimport { getDoctorsBySpecialty } from '../services/doctorApi';\n\n/**\n * Custom hook for managing doctors data with loading and error states\n */\nexport interface UseDoctorsState {\n  doctors: Doctor[];\n  loading: boolean;\n  error: string | null;\n  fetchDoctors: (specialtyId: number) => Promise<void>;\n  clearError: () => void;\n}\n\nexport function useDoctors(): UseDoctorsState {\n  const [doctors, setDoctors] = useState<Doctor[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchDoctors = useCallback(async (specialtyId: number) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const doctorsData = await fetchDoctorsBySpecialty(specialtyId);\n      setDoctors(doctorsData);\n    } catch (err) {\n      if (err instanceof ApiError) {\n        // Handle specific API errors\n        switch (err.status) {\n          case 404:\n            setError(`No doctors found for the selected specialty.`);\n            setDoctors([]); // Clear previous results\n            break;\n          case 401:\n            setError('Authentication required. Please log in.');\n            break;\n          case 403:\n            setError('Access denied. You do not have permission to view this data.');\n            break;\n          case 500:\n            setError('Server error. Please try again later.');\n            break;\n          case 0:\n            setError('Network error. Please check your internet connection.');\n            break;\n          default:\n            setError(err.message || 'An unexpected error occurred.');\n        }\n      } else {\n        setError('An unexpected error occurred. Please try again.');\n      }\n      console.error('Error fetching doctors:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  return {\n    doctors,\n    loading,\n    error,\n    fetchDoctors,\n    clearError\n  };\n}\n\n/**\n * Hook for fetching doctors by specialty with automatic loading on mount\n */\nexport function useDoctorsBySpecialty(specialtyId: number | null): UseDoctorsState {\n  const doctorsState = useDoctors();\n\n  useEffect(() => {\n    if (specialtyId && specialtyId > 0) {\n      doctorsState.fetchDoctors(specialtyId);\n    }\n  }, [specialtyId, doctorsState.fetchDoctors]);\n\n  return doctorsState;\n}"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAAiBC,QAAQ,QAAQ,cAAc;;AAG/C;AACA;AACA;;AASA,OAAO,SAASC,UAAUA,CAAA,EAAoB;EAAAC,EAAA;EAC5C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAW,EAAE,CAAC;EACpD,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAU,KAAK,CAAC;EACtD,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAgB,IAAI,CAAC;EAEvD,MAAMY,YAAY,GAAGV,WAAW,CAAC,MAAOW,WAAmB,IAAK;IAC9DJ,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAMG,WAAW,GAAG,MAAMC,uBAAuB,CAACF,WAAW,CAAC;MAC9DN,UAAU,CAACO,WAAW,CAAC;IACzB,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZ,IAAIA,GAAG,YAAYb,QAAQ,EAAE;QAC3B;QACA,QAAQa,GAAG,CAACC,MAAM;UAChB,KAAK,GAAG;YACNN,QAAQ,CAAC,8CAA8C,CAAC;YACxDJ,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;YAChB;UACF,KAAK,GAAG;YACNI,QAAQ,CAAC,yCAAyC,CAAC;YACnD;UACF,KAAK,GAAG;YACNA,QAAQ,CAAC,8DAA8D,CAAC;YACxE;UACF,KAAK,GAAG;YACNA,QAAQ,CAAC,uCAAuC,CAAC;YACjD;UACF,KAAK,CAAC;YACJA,QAAQ,CAAC,uDAAuD,CAAC;YACjE;UACF;YACEA,QAAQ,CAACK,GAAG,CAACE,OAAO,IAAI,+BAA+B,CAAC;QAC5D;MACF,CAAC,MAAM;QACLP,QAAQ,CAAC,iDAAiD,CAAC;MAC7D;MACAQ,OAAO,CAACT,KAAK,CAAC,yBAAyB,EAAEM,GAAG,CAAC;IAC/C,CAAC,SAAS;MACRP,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMW,UAAU,GAAGlB,WAAW,CAAC,MAAM;IACnCS,QAAQ,CAAC,IAAI,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLL,OAAO;IACPE,OAAO;IACPE,KAAK;IACLE,YAAY;IACZQ;EACF,CAAC;AACH;;AAEA;AACA;AACA;AAFAf,EAAA,CAzDgBD,UAAU;AA4D1B,OAAO,SAASiB,qBAAqBA,CAACR,WAA0B,EAAmB;EAAAS,GAAA;EACjF,MAAMC,YAAY,GAAGnB,UAAU,CAAC,CAAC;EAEjCH,SAAS,CAAC,MAAM;IACd,IAAIY,WAAW,IAAIA,WAAW,GAAG,CAAC,EAAE;MAClCU,YAAY,CAACX,YAAY,CAACC,WAAW,CAAC;IACxC;EACF,CAAC,EAAE,CAACA,WAAW,EAAEU,YAAY,CAACX,YAAY,CAAC,CAAC;EAE5C,OAAOW,YAAY;AACrB;AAACD,GAAA,CAVeD,qBAAqB;EAAA,QACdjB,UAAU;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}