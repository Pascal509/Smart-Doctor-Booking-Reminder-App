{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';import apiClient from'../api/clients/apiClient';import{useAuth}from'../contexts/AuthContext';/**\n * Custom hook to fetch and manage patient appointments\n * Fetches appointments from GET /api/v1/appointments/patient\n */export const usePatientAppointments=()=>{const[appointments,setAppointments]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const{authState}=useAuth();const{user}=authState;const fetchAppointments=useCallback(async()=>{if(!user){setAppointments([]);setLoading(false);return;}try{setLoading(true);setError(null);const response=await apiClient.get('/api/v1/appointments/patient');if(Array.isArray(response)){setAppointments(response);}else{setError('Invalid response format');}}catch(err){var _err$response,_err$response$data;console.error('Error fetching patient appointments:',err);setError(((_err$response=err.response)===null||_err$response===void 0?void 0:(_err$response$data=_err$response.data)===null||_err$response$data===void 0?void 0:_err$response$data.message)||'Failed to fetch appointments');}finally{setLoading(false);}},[user]);const refetch=async()=>{await fetchAppointments();};useEffect(()=>{fetchAppointments();},[user,fetchAppointments]);return{appointments,loading,error,refetch};};","map":{"version":3,"names":["useState","useEffect","useCallback","apiClient","useAuth","usePatientAppointments","appointments","setAppointments","loading","setLoading","error","setError","authState","user","fetchAppointments","response","get","Array","isArray","err","_err$response","_err$response$data","console","data","message","refetch"],"sources":["C:/Users/HP/Smart-Doctor-Booking-Reminder-App/frontend/src/hooks/usePatientAppointments.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport apiClient from '../api/clients/apiClient';\nimport { Appointment } from '../api/types/api';\nimport { useAuth } from '../contexts/AuthContext';\n\nexport interface UsePatientAppointmentsResult {\n  appointments: Appointment[];\n  loading: boolean;\n  error: string | null;\n  refetch: () => Promise<void>;\n}\n\n/**\n * Custom hook to fetch and manage patient appointments\n * Fetches appointments from GET /api/v1/appointments/patient\n */\nexport const usePatientAppointments = (): UsePatientAppointmentsResult => {\n  const [appointments, setAppointments] = useState<Appointment[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const { authState } = useAuth();\n  const { user } = authState;\n\n  const fetchAppointments = useCallback(async () => {\n    if (!user) {\n      setAppointments([]);\n      setLoading(false);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await apiClient.get<Appointment[]>('/api/v1/appointments/patient');\n      \n      if (Array.isArray(response)) {\n        setAppointments(response);\n      } else {\n        setError('Invalid response format');\n      }\n    } catch (err: any) {\n      console.error('Error fetching patient appointments:', err);\n      setError(err.response?.data?.message || 'Failed to fetch appointments');\n    } finally {\n      setLoading(false);\n    }\n  }, [user]);\n\n  const refetch = async () => {\n    await fetchAppointments();\n  };\n\n  useEffect(() => {\n    fetchAppointments();\n  }, [user, fetchAppointments]);\n\n  return {\n    appointments,\n    loading,\n    error,\n    refetch\n  };\n};"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,CAAEC,WAAW,KAAQ,OAAO,CACxD,MAAO,CAAAC,SAAS,KAAM,0BAA0B,CAEhD,OAASC,OAAO,KAAQ,yBAAyB,CASjD;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,sBAAsB,CAAGA,CAAA,GAAoC,CACxE,KAAM,CAACC,YAAY,CAAEC,eAAe,CAAC,CAAGP,QAAQ,CAAgB,EAAE,CAAC,CACnE,KAAM,CAACQ,OAAO,CAAEC,UAAU,CAAC,CAAGT,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAACU,KAAK,CAAEC,QAAQ,CAAC,CAAGX,QAAQ,CAAgB,IAAI,CAAC,CACvD,KAAM,CAAEY,SAAU,CAAC,CAAGR,OAAO,CAAC,CAAC,CAC/B,KAAM,CAAES,IAAK,CAAC,CAAGD,SAAS,CAE1B,KAAM,CAAAE,iBAAiB,CAAGZ,WAAW,CAAC,SAAY,CAChD,GAAI,CAACW,IAAI,CAAE,CACTN,eAAe,CAAC,EAAE,CAAC,CACnBE,UAAU,CAAC,KAAK,CAAC,CACjB,OACF,CAEA,GAAI,CACFA,UAAU,CAAC,IAAI,CAAC,CAChBE,QAAQ,CAAC,IAAI,CAAC,CAEd,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAAZ,SAAS,CAACa,GAAG,CAAgB,8BAA8B,CAAC,CAEnF,GAAIC,KAAK,CAACC,OAAO,CAACH,QAAQ,CAAC,CAAE,CAC3BR,eAAe,CAACQ,QAAQ,CAAC,CAC3B,CAAC,IAAM,CACLJ,QAAQ,CAAC,yBAAyB,CAAC,CACrC,CACF,CAAE,MAAOQ,GAAQ,CAAE,KAAAC,aAAA,CAAAC,kBAAA,CACjBC,OAAO,CAACZ,KAAK,CAAC,sCAAsC,CAAES,GAAG,CAAC,CAC1DR,QAAQ,CAAC,EAAAS,aAAA,CAAAD,GAAG,CAACJ,QAAQ,UAAAK,aAAA,kBAAAC,kBAAA,CAAZD,aAAA,CAAcG,IAAI,UAAAF,kBAAA,iBAAlBA,kBAAA,CAAoBG,OAAO,GAAI,8BAA8B,CAAC,CACzE,CAAC,OAAS,CACRf,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAAE,CAACI,IAAI,CAAC,CAAC,CAEV,KAAM,CAAAY,OAAO,CAAG,KAAAA,CAAA,GAAY,CAC1B,KAAM,CAAAX,iBAAiB,CAAC,CAAC,CAC3B,CAAC,CAEDb,SAAS,CAAC,IAAM,CACda,iBAAiB,CAAC,CAAC,CACrB,CAAC,CAAE,CAACD,IAAI,CAAEC,iBAAiB,CAAC,CAAC,CAE7B,MAAO,CACLR,YAAY,CACZE,OAAO,CACPE,KAAK,CACLe,OACF,CAAC,CACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}