{"ast":null,"code":"import{ApiError}from'../types/api';import apiClient from'./apiClient';/**\n * Books a new appointment with the specified doctor\n * \n * @param data - Booking data containing doctor_id, patient_id, appointment_time, and optional notes\n * @returns Promise<BookingResponse> - Booking confirmation with appointment details\n * @throws Error - When the API request fails or returns an error\n * \n * OpenAPI Specification:\n * POST /api/v1/appointments/book\n * \n * Request Body:\n * {\n *   \"doctor_id\": number,\n *   \"patient_id\": number,\n *   \"appointment_time\": string (ISO 8601 format),\n *   \"notes\": string (optional)\n * }\n * \n * Success Response (201):\n * {\n *   \"appointment_id\": number,\n *   \"doctor_id\": number,\n *   \"patient_id\": number,\n *   \"appointment_time\": string,\n *   \"status\": string,\n *   \"notes\": string,\n *   \"created_at\": string,\n *   \"message\": string\n * }\n * \n * Error Responses:\n * 400 - Bad Request (invalid data)\n * 401 - Unauthorized (authentication required)\n * 403 - Forbidden (insufficient permissions)\n * 404 - Not Found (doctor not found)\n * 409 - Conflict (time slot not available)\n * 422 - Unprocessable Entity (validation errors)\n */export const bookAppointment=async data=>{try{// Validate required fields\nif(!data.doctor_id||!data.appointment_time||!data.duration){throw new Error('Doctor ID, appointment time, and duration are required');}// Validate appointment time format (basic ISO 8601 check)\nconst appointmentDate=new Date(data.appointment_time);if(isNaN(appointmentDate.getTime())){throw new Error('Invalid appointment time format. Please use ISO 8601 format.');}// Check if appointment time is in the future\nif(appointmentDate<=new Date()){throw new Error('Appointment time must be in the future.');}const response=await apiClient.post('/appointments/book',{doctor_id:data.doctor_id,appointment_time:data.appointment_time,duration:data.duration,appointment_type:data.appointment_type||'CONSULTATION',notes:data.notes||'',reminder_type:data.reminder_type||'EMAIL',reminder_time:data.reminder_time||60});return response;}catch(error){var _error$response3;// Handle specific error cases\nif(error.status===401){throw new Error('Authentication failed - please log in again');}if(error.status===403){throw new Error('You do not have permission to book appointments');}if(error.status===404){throw new Error('Doctor not found or not available');}if(error.status===409){throw new Error('The selected time slot is no longer available. Please choose a different time.');}if(error.status===422){var _error$response;const validationMessage=((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.message)||'Invalid appointment data provided';throw new Error(validationMessage);}if(error.status===400){var _error$response2;const badRequestMessage=((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.message)||'Invalid request data';throw new Error(badRequestMessage);}// Generic error handling\nconst message=((_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.message)||error.message||'Failed to book appointment';throw new Error(message);}};/**\n * Gets available time slots for a specific doctor on a given date\n * \n * @param doctorId - The ID of the doctor\n * @param date - The date to check availability (YYYY-MM-DD format)\n * @returns Promise<string[]> - Array of available time slots in ISO 8601 format\n * @throws Error - When the API request fails or returns an error\n */export const getAvailableSlots=async(doctorId,date)=>{try{if(!doctorId||!date){throw new Error('Doctor ID and date are required');}const response=await apiClient.get(\"/appointments/availability?doctor_id=\".concat(doctorId,\"&date=\").concat(date));return response;}catch(error){var _error$response4;if(error.status===401){throw new Error('Authentication failed - please log in again');}if(error.status===404){throw new Error('Doctor not found or no availability information');}const message=((_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.message)||error.message||'Failed to fetch available time slots';throw new Error(message);}};/**\n * Cancel an existing appointment\n * \n * @param id - The appointment ID to cancel\n * @param reason - Optional reason for cancellation\n * @returns Promise<ApiResponse> - Success response with cancellation confirmation\n * @throws {ApiError} When the request fails or appointment cannot be cancelled\n * \n * @openapi\n * /api/v1/appointments/{id}/cancel:\n *   delete:\n *     summary: Cancel an appointment\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: integer\n *         description: The appointment ID\n *     requestBody:\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               reason:\n *                 type: string\n *                 description: Optional reason for cancellation\n *     responses:\n *       200:\n *         description: Appointment cancelled successfully\n *       400:\n *         description: Invalid appointment ID or appointment cannot be cancelled\n *       401:\n *         description: Unauthorized - invalid or missing token\n *       404:\n *         description: Appointment not found\n *       500:\n *         description: Internal server error\n */export const cancelAppointment=async(id,reason)=>{// Validate input\nif(!id||id<=0){throw new ApiError('Invalid appointment ID',400);}try{const requestBody=reason?{reason}:{};const response=await apiClient.delete(\"/appointments/\".concat(id,\"/cancel\"),{data:requestBody});return{message:response.message||'Appointment cancelled successfully',data:response.data};}catch(error){// Handle API errors\nif(error.response){const{status,data}=error.response;throw new ApiError((data===null||data===void 0?void 0:data.message)||(data===null||data===void 0?void 0:data.error)||'Failed to cancel appointment',status,data);}// Handle network or other errors\nthrow new ApiError(error.message||'Network error occurred while cancelling appointment',0);}};","map":{"version":3,"names":["ApiError","apiClient","bookAppointment","data","doctor_id","appointment_time","duration","Error","appointmentDate","Date","isNaN","getTime","response","post","appointment_type","notes","reminder_type","reminder_time","error","_error$response3","status","_error$response","validationMessage","message","_error$response2","badRequestMessage","getAvailableSlots","doctorId","date","get","concat","_error$response4","cancelAppointment","id","reason","requestBody","delete"],"sources":["C:/Users/HP/Smart-Doctor-Booking-Reminder-App/frontend/src/api/clients/appointmentApi.ts"],"sourcesContent":["import { BookingData, BookingResponse, ApiResponse, ApiError } from '../types/api';\nimport apiClient from './apiClient';\n\n/**\n * Books a new appointment with the specified doctor\n * \n * @param data - Booking data containing doctor_id, patient_id, appointment_time, and optional notes\n * @returns Promise<BookingResponse> - Booking confirmation with appointment details\n * @throws Error - When the API request fails or returns an error\n * \n * OpenAPI Specification:\n * POST /api/v1/appointments/book\n * \n * Request Body:\n * {\n *   \"doctor_id\": number,\n *   \"patient_id\": number,\n *   \"appointment_time\": string (ISO 8601 format),\n *   \"notes\": string (optional)\n * }\n * \n * Success Response (201):\n * {\n *   \"appointment_id\": number,\n *   \"doctor_id\": number,\n *   \"patient_id\": number,\n *   \"appointment_time\": string,\n *   \"status\": string,\n *   \"notes\": string,\n *   \"created_at\": string,\n *   \"message\": string\n * }\n * \n * Error Responses:\n * 400 - Bad Request (invalid data)\n * 401 - Unauthorized (authentication required)\n * 403 - Forbidden (insufficient permissions)\n * 404 - Not Found (doctor not found)\n * 409 - Conflict (time slot not available)\n * 422 - Unprocessable Entity (validation errors)\n */\nexport const bookAppointment = async (data: BookingData): Promise<BookingResponse> => {\n  try {\n    // Validate required fields\n    if (!data.doctor_id || !data.appointment_time || !data.duration) {\n      throw new Error('Doctor ID, appointment time, and duration are required');\n    }\n\n    // Validate appointment time format (basic ISO 8601 check)\n    const appointmentDate = new Date(data.appointment_time);\n    if (isNaN(appointmentDate.getTime())) {\n      throw new Error('Invalid appointment time format. Please use ISO 8601 format.');\n    }\n\n    // Check if appointment time is in the future\n    if (appointmentDate <= new Date()) {\n      throw new Error('Appointment time must be in the future.');\n    }\n\n    const response = await apiClient.post<BookingResponse>(\n      '/appointments/book',\n      {\n        doctor_id: data.doctor_id,\n        appointment_time: data.appointment_time,\n        duration: data.duration,\n        appointment_type: data.appointment_type || 'CONSULTATION',\n        notes: data.notes || '',\n        reminder_type: data.reminder_type || 'EMAIL',\n        reminder_time: data.reminder_time || 60\n      }\n    );\n\n    return response;\n  } catch (error: any) {\n    // Handle specific error cases\n    if (error.status === 401) {\n      throw new Error('Authentication failed - please log in again');\n    }\n    \n    if (error.status === 403) {\n      throw new Error('You do not have permission to book appointments');\n    }\n    \n    if (error.status === 404) {\n      throw new Error('Doctor not found or not available');\n    }\n    \n    if (error.status === 409) {\n      throw new Error('The selected time slot is no longer available. Please choose a different time.');\n    }\n    \n    if (error.status === 422) {\n      const validationMessage = error.response?.message || 'Invalid appointment data provided';\n      throw new Error(validationMessage);\n    }\n    \n    if (error.status === 400) {\n      const badRequestMessage = error.response?.message || 'Invalid request data';\n      throw new Error(badRequestMessage);\n    }\n    \n    // Generic error handling\n    const message = error.response?.message || error.message || 'Failed to book appointment';\n    throw new Error(message);\n  }\n};\n\n/**\n * Gets available time slots for a specific doctor on a given date\n * \n * @param doctorId - The ID of the doctor\n * @param date - The date to check availability (YYYY-MM-DD format)\n * @returns Promise<string[]> - Array of available time slots in ISO 8601 format\n * @throws Error - When the API request fails or returns an error\n */\nexport const getAvailableSlots = async (doctorId: number, date: string): Promise<string[]> => {\n  try {\n    if (!doctorId || !date) {\n      throw new Error('Doctor ID and date are required');\n    }\n\n    const response = await apiClient.get<string[]>(\n      `/appointments/availability?doctor_id=${doctorId}&date=${date}`\n    );\n\n    return response;\n  } catch (error: any) {\n    if (error.status === 401) {\n      throw new Error('Authentication failed - please log in again');\n    }\n    \n    if (error.status === 404) {\n      throw new Error('Doctor not found or no availability information');\n    }\n    \n    const message = error.response?.message || error.message || 'Failed to fetch available time slots';\n    throw new Error(message);\n  }\n};\n\n/**\n * Cancel an existing appointment\n * \n * @param id - The appointment ID to cancel\n * @param reason - Optional reason for cancellation\n * @returns Promise<ApiResponse> - Success response with cancellation confirmation\n * @throws {ApiError} When the request fails or appointment cannot be cancelled\n * \n * @openapi\n * /api/v1/appointments/{id}/cancel:\n *   delete:\n *     summary: Cancel an appointment\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: integer\n *         description: The appointment ID\n *     requestBody:\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               reason:\n *                 type: string\n *                 description: Optional reason for cancellation\n *     responses:\n *       200:\n *         description: Appointment cancelled successfully\n *       400:\n *         description: Invalid appointment ID or appointment cannot be cancelled\n *       401:\n *         description: Unauthorized - invalid or missing token\n *       404:\n *         description: Appointment not found\n *       500:\n *         description: Internal server error\n */\nexport const cancelAppointment = async (id: number, reason?: string): Promise<ApiResponse<any>> => {\n  // Validate input\n  if (!id || id <= 0) {\n    throw new ApiError('Invalid appointment ID', 400);\n  }\n\n  try {\n    const requestBody = reason ? { reason } : {};\n    \n    const response = await apiClient.delete<ApiResponse<any>>(\n      `/appointments/${id}/cancel`,\n      { data: requestBody }\n    );\n    \n    return {\n      message: response.message || 'Appointment cancelled successfully',\n      data: response.data\n    };\n  } catch (error: any) {\n    // Handle API errors\n    if (error.response) {\n      const { status, data } = error.response;\n      throw new ApiError(\n        data?.message || data?.error || 'Failed to cancel appointment',\n        status,\n        data\n      );\n    }\n    \n    // Handle network or other errors\n    throw new ApiError(\n      error.message || 'Network error occurred while cancelling appointment',\n      0\n    );\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}