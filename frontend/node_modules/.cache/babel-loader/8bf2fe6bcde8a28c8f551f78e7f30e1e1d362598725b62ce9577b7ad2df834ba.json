{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { getAvailableSlots } from '../services/appointmentApi';\n/**\n * Custom hook for fetching doctor availability time slots\n * \n * @param doctorId - The ID of the doctor to fetch availability for\n * @param date - The date to check availability (YYYY-MM-DD format)\n * @returns Object containing time slots, loading state, error state, and refresh function\n */\nexport const useDoctorAvailability = (doctorId, date) => {\n  _s();\n  const [timeSlots, setTimeSlots] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  /**\n   * Fetch available time slots from the API\n   */\n  const fetchAvailability = async () => {\n    if (!doctorId || !date) {\n      setTimeSlots([]);\n      setLoading(false);\n      return;\n    }\n    try {\n      setLoading(true);\n      setError(null);\n      const availableSlots = await getAvailableSlots(doctorId, date);\n\n      // Generate all possible time slots for the day (9 AM to 5 PM, 30-minute intervals)\n      const allSlots = generateTimeSlots(date);\n\n      // Mark slots as available or unavailable based on API response\n      const slotsWithAvailability = allSlots.map(slot => ({\n        time: slot,\n        available: availableSlots.includes(slot),\n        displayTime: formatTimeForDisplay(slot)\n      }));\n      setTimeSlots(slotsWithAvailability);\n    } catch (err) {\n      const errorMessage = err.message || 'Failed to fetch available time slots';\n      setError(errorMessage);\n      setTimeSlots([]);\n      console.error('Error fetching doctor availability:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Generate all possible time slots for a given date\n   * @param date - Date in YYYY-MM-DD format\n   * @returns Array of ISO 8601 time strings\n   */\n  const generateTimeSlots = date => {\n    const slots = [];\n    const baseDate = new Date(date + 'T00:00:00');\n\n    // Generate slots from 9 AM to 5 PM (30-minute intervals)\n    for (let hour = 9; hour < 17; hour++) {\n      for (let minute = 0; minute < 60; minute += 30) {\n        const slotTime = new Date(baseDate);\n        slotTime.setHours(hour, minute, 0, 0);\n        slots.push(slotTime.toISOString());\n      }\n    }\n    return slots;\n  };\n\n  /**\n   * Format ISO time string for display\n   * @param isoTime - ISO 8601 time string\n   * @returns Formatted time string (e.g., \"2:30 PM\")\n   */\n  const formatTimeForDisplay = isoTime => {\n    const date = new Date(isoTime);\n    return date.toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true\n    });\n  };\n\n  /**\n   * Refresh the availability data\n   */\n  const refresh = () => {\n    fetchAvailability();\n  };\n\n  // Fetch availability when doctorId or date changes\n  useEffect(() => {\n    fetchAvailability();\n  }, [doctorId, date]);\n  return {\n    timeSlots,\n    loading,\n    error,\n    refresh\n  };\n};\n\n/**\n * Helper function to check if a time slot is in the past\n * @param isoTime - ISO 8601 time string\n * @returns True if the time slot is in the past\n */\n_s(useDoctorAvailability, \"gqMfm4oCmcMwumXiWUz7X6MTC7I=\");\nexport const isTimeSlotInPast = isoTime => {\n  const slotTime = new Date(isoTime);\n  const now = new Date();\n  return slotTime <= now;\n};\n\n/**\n * Helper function to get the next available time slot\n * @param timeSlots - Array of time slots\n * @returns The next available time slot or null if none available\n */\nexport const getNextAvailableSlot = timeSlots => {\n  const now = new Date();\n  for (const slot of timeSlots) {\n    const slotTime = new Date(slot.time);\n    if (slot.available && slotTime > now) {\n      return slot;\n    }\n  }\n  return null;\n};","map":{"version":3,"names":["useState","useEffect","getAvailableSlots","useDoctorAvailability","doctorId","date","_s","timeSlots","setTimeSlots","loading","setLoading","error","setError","fetchAvailability","availableSlots","allSlots","generateTimeSlots","slotsWithAvailability","map","slot","time","available","includes","displayTime","formatTimeForDisplay","err","errorMessage","message","console","slots","baseDate","Date","hour","minute","slotTime","setHours","push","toISOString","isoTime","toLocaleTimeString","hour12","refresh","isTimeSlotInPast","now","getNextAvailableSlot"],"sources":["C:/Users/HP/Smart-Doctor-Booking-Reminder-App/frontend/src/hooks/useDoctorAvailability.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { getAvailableSlots } from '../services/appointmentApi';\n\ninterface TimeSlot {\n  time: string; // ISO 8601 format\n  available: boolean;\n  displayTime: string; // Formatted time for display\n}\n\ninterface UseDoctorAvailabilityReturn {\n  timeSlots: TimeSlot[];\n  loading: boolean;\n  error: string | null;\n  refresh: () => void;\n}\n\n/**\n * Custom hook for fetching doctor availability time slots\n * \n * @param doctorId - The ID of the doctor to fetch availability for\n * @param date - The date to check availability (YYYY-MM-DD format)\n * @returns Object containing time slots, loading state, error state, and refresh function\n */\nexport const useDoctorAvailability = (\n  doctorId: number | null,\n  date: string\n): UseDoctorAvailabilityReturn => {\n  const [timeSlots, setTimeSlots] = useState<TimeSlot[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  /**\n   * Fetch available time slots from the API\n   */\n  const fetchAvailability = async () => {\n    if (!doctorId || !date) {\n      setTimeSlots([]);\n      setLoading(false);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const availableSlots = await getAvailableSlots(doctorId, date);\n      \n      // Generate all possible time slots for the day (9 AM to 5 PM, 30-minute intervals)\n      const allSlots = generateTimeSlots(date);\n      \n      // Mark slots as available or unavailable based on API response\n      const slotsWithAvailability = allSlots.map(slot => ({\n        time: slot,\n        available: availableSlots.includes(slot),\n        displayTime: formatTimeForDisplay(slot)\n      }));\n      \n      setTimeSlots(slotsWithAvailability);\n    } catch (err: any) {\n      const errorMessage = err.message || 'Failed to fetch available time slots';\n      setError(errorMessage);\n      setTimeSlots([]);\n      console.error('Error fetching doctor availability:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Generate all possible time slots for a given date\n   * @param date - Date in YYYY-MM-DD format\n   * @returns Array of ISO 8601 time strings\n   */\n  const generateTimeSlots = (date: string): string[] => {\n    const slots: string[] = [];\n    const baseDate = new Date(date + 'T00:00:00');\n    \n    // Generate slots from 9 AM to 5 PM (30-minute intervals)\n    for (let hour = 9; hour < 17; hour++) {\n      for (let minute = 0; minute < 60; minute += 30) {\n        const slotTime = new Date(baseDate);\n        slotTime.setHours(hour, minute, 0, 0);\n        slots.push(slotTime.toISOString());\n      }\n    }\n    \n    return slots;\n  };\n\n  /**\n   * Format ISO time string for display\n   * @param isoTime - ISO 8601 time string\n   * @returns Formatted time string (e.g., \"2:30 PM\")\n   */\n  const formatTimeForDisplay = (isoTime: string): string => {\n    const date = new Date(isoTime);\n    return date.toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true\n    });\n  };\n\n  /**\n   * Refresh the availability data\n   */\n  const refresh = () => {\n    fetchAvailability();\n  };\n\n  // Fetch availability when doctorId or date changes\n  useEffect(() => {\n    fetchAvailability();\n  }, [doctorId, date]);\n\n  return {\n    timeSlots,\n    loading,\n    error,\n    refresh\n  };\n};\n\n/**\n * Helper function to check if a time slot is in the past\n * @param isoTime - ISO 8601 time string\n * @returns True if the time slot is in the past\n */\nexport const isTimeSlotInPast = (isoTime: string): boolean => {\n  const slotTime = new Date(isoTime);\n  const now = new Date();\n  return slotTime <= now;\n};\n\n/**\n * Helper function to get the next available time slot\n * @param timeSlots - Array of time slots\n * @returns The next available time slot or null if none available\n */\nexport const getNextAvailableSlot = (timeSlots: TimeSlot[]): TimeSlot | null => {\n  const now = new Date();\n  \n  for (const slot of timeSlots) {\n    const slotTime = new Date(slot.time);\n    if (slot.available && slotTime > now) {\n      return slot;\n    }\n  }\n  \n  return null;\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,iBAAiB,QAAQ,4BAA4B;AAe9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,qBAAqB,GAAGA,CACnCC,QAAuB,EACvBC,IAAY,KACoB;EAAAC,EAAA;EAChC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAa,EAAE,CAAC;EAC1D,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAU,KAAK,CAAC;EACtD,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAgB,IAAI,CAAC;;EAEvD;AACF;AACA;EACE,MAAMa,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI,CAACT,QAAQ,IAAI,CAACC,IAAI,EAAE;MACtBG,YAAY,CAAC,EAAE,CAAC;MAChBE,UAAU,CAAC,KAAK,CAAC;MACjB;IACF;IAEA,IAAI;MACFA,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MAEd,MAAME,cAAc,GAAG,MAAMZ,iBAAiB,CAACE,QAAQ,EAAEC,IAAI,CAAC;;MAE9D;MACA,MAAMU,QAAQ,GAAGC,iBAAiB,CAACX,IAAI,CAAC;;MAExC;MACA,MAAMY,qBAAqB,GAAGF,QAAQ,CAACG,GAAG,CAACC,IAAI,KAAK;QAClDC,IAAI,EAAED,IAAI;QACVE,SAAS,EAAEP,cAAc,CAACQ,QAAQ,CAACH,IAAI,CAAC;QACxCI,WAAW,EAAEC,oBAAoB,CAACL,IAAI;MACxC,CAAC,CAAC,CAAC;MAEHX,YAAY,CAACS,qBAAqB,CAAC;IACrC,CAAC,CAAC,OAAOQ,GAAQ,EAAE;MACjB,MAAMC,YAAY,GAAGD,GAAG,CAACE,OAAO,IAAI,sCAAsC;MAC1Ef,QAAQ,CAACc,YAAY,CAAC;MACtBlB,YAAY,CAAC,EAAE,CAAC;MAChBoB,OAAO,CAACjB,KAAK,CAAC,qCAAqC,EAAEc,GAAG,CAAC;IAC3D,CAAC,SAAS;MACRf,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;AACF;AACA;AACA;AACA;EACE,MAAMM,iBAAiB,GAAIX,IAAY,IAAe;IACpD,MAAMwB,KAAe,GAAG,EAAE;IAC1B,MAAMC,QAAQ,GAAG,IAAIC,IAAI,CAAC1B,IAAI,GAAG,WAAW,CAAC;;IAE7C;IACA,KAAK,IAAI2B,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAG,EAAE,EAAEA,IAAI,EAAE,EAAE;MACpC,KAAK,IAAIC,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAG,EAAE,EAAEA,MAAM,IAAI,EAAE,EAAE;QAC9C,MAAMC,QAAQ,GAAG,IAAIH,IAAI,CAACD,QAAQ,CAAC;QACnCI,QAAQ,CAACC,QAAQ,CAACH,IAAI,EAAEC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;QACrCJ,KAAK,CAACO,IAAI,CAACF,QAAQ,CAACG,WAAW,CAAC,CAAC,CAAC;MACpC;IACF;IAEA,OAAOR,KAAK;EACd,CAAC;;EAED;AACF;AACA;AACA;AACA;EACE,MAAML,oBAAoB,GAAIc,OAAe,IAAa;IACxD,MAAMjC,IAAI,GAAG,IAAI0B,IAAI,CAACO,OAAO,CAAC;IAC9B,OAAOjC,IAAI,CAACkC,kBAAkB,CAAC,OAAO,EAAE;MACtCP,IAAI,EAAE,SAAS;MACfC,MAAM,EAAE,SAAS;MACjBO,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC;;EAED;AACF;AACA;EACE,MAAMC,OAAO,GAAGA,CAAA,KAAM;IACpB5B,iBAAiB,CAAC,CAAC;EACrB,CAAC;;EAED;EACAZ,SAAS,CAAC,MAAM;IACdY,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,CAACT,QAAQ,EAAEC,IAAI,CAAC,CAAC;EAEpB,OAAO;IACLE,SAAS;IACTE,OAAO;IACPE,KAAK;IACL8B;EACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AAJAnC,EAAA,CApGaH,qBAAqB;AAyGlC,OAAO,MAAMuC,gBAAgB,GAAIJ,OAAe,IAAc;EAC5D,MAAMJ,QAAQ,GAAG,IAAIH,IAAI,CAACO,OAAO,CAAC;EAClC,MAAMK,GAAG,GAAG,IAAIZ,IAAI,CAAC,CAAC;EACtB,OAAOG,QAAQ,IAAIS,GAAG;AACxB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,oBAAoB,GAAIrC,SAAqB,IAAsB;EAC9E,MAAMoC,GAAG,GAAG,IAAIZ,IAAI,CAAC,CAAC;EAEtB,KAAK,MAAMZ,IAAI,IAAIZ,SAAS,EAAE;IAC5B,MAAM2B,QAAQ,GAAG,IAAIH,IAAI,CAACZ,IAAI,CAACC,IAAI,CAAC;IACpC,IAAID,IAAI,CAACE,SAAS,IAAIa,QAAQ,GAAGS,GAAG,EAAE;MACpC,OAAOxB,IAAI;IACb;EACF;EAEA,OAAO,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}