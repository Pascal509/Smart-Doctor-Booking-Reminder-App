{"ast":null,"code":"// Secure token storage utility using sessionStorage\n// sessionStorage is more secure than localStorage as it's cleared when the tab is closed\nconst TOKEN_KEY='smart_doctor_auth_token';const USER_KEY='smart_doctor_auth_user';/**\n * Securely store the JWT token in sessionStorage\n * @param token - JWT token string\n */export const storeToken=token=>{try{sessionStorage.setItem(TOKEN_KEY,token);}catch(error){console.error('Failed to store token:',error);throw new Error('Unable to store authentication token');}};/**\n * Retrieve the JWT token from sessionStorage\n * @returns JWT token string or null if not found\n */export const getToken=()=>{try{return sessionStorage.getItem(TOKEN_KEY);}catch(error){console.error('Failed to retrieve token:',error);return null;}};/**\n * Store user information in sessionStorage\n * @param user - User object to store\n */export const storeUser=user=>{try{sessionStorage.setItem(USER_KEY,JSON.stringify(user));}catch(error){console.error('Failed to store user data:',error);throw new Error('Unable to store user information');}};/**\n * Retrieve user information from sessionStorage\n * @returns User object or null if not found\n */export const getUser=()=>{try{const userData=sessionStorage.getItem(USER_KEY);return userData?JSON.parse(userData):null;}catch(error){console.error('Failed to retrieve user data:',error);return null;}};/**\n * Remove the JWT token from sessionStorage\n */export const removeToken=()=>{try{sessionStorage.removeItem(TOKEN_KEY);}catch(error){console.error('Failed to remove token:',error);}};/**\n * Remove user information from sessionStorage\n */export const removeUser=()=>{try{sessionStorage.removeItem(USER_KEY);}catch(error){console.error('Failed to remove user data:',error);}};/**\n * Clear all authentication data from sessionStorage\n */export const clearAuthData=()=>{removeToken();removeUser();};/**\n * Check if a valid token exists in storage\n * @returns boolean indicating if token exists\n */export const hasValidToken=()=>{const token=getToken();return token!==null&&token.length>0;};/**\n * Get the Authorization header value for API requests\n * @returns Authorization header string or null\n */export const getAuthHeader=()=>{const token=getToken();return token?\"Bearer \".concat(token):null;};","map":{"version":3,"names":["TOKEN_KEY","USER_KEY","storeToken","token","sessionStorage","setItem","error","console","Error","getToken","getItem","storeUser","user","JSON","stringify","getUser","userData","parse","removeToken","removeItem","removeUser","clearAuthData","hasValidToken","length","getAuthHeader","concat"],"sources":["C:/Users/HP/Smart-Doctor-Booking-Reminder-App/frontend/src/utils/tokenStorage.ts"],"sourcesContent":["// Secure token storage utility using sessionStorage\n// sessionStorage is more secure than localStorage as it's cleared when the tab is closed\n\nconst TOKEN_KEY = 'smart_doctor_auth_token';\nconst USER_KEY = 'smart_doctor_auth_user';\n\n/**\n * Securely store the JWT token in sessionStorage\n * @param token - JWT token string\n */\nexport const storeToken = (token: string): void => {\n  try {\n    sessionStorage.setItem(TOKEN_KEY, token);\n  } catch (error) {\n    console.error('Failed to store token:', error);\n    throw new Error('Unable to store authentication token');\n  }\n};\n\n/**\n * Retrieve the JWT token from sessionStorage\n * @returns JWT token string or null if not found\n */\nexport const getToken = (): string | null => {\n  try {\n    return sessionStorage.getItem(TOKEN_KEY);\n  } catch (error) {\n    console.error('Failed to retrieve token:', error);\n    return null;\n  }\n};\n\n/**\n * Store user information in sessionStorage\n * @param user - User object to store\n */\nexport const storeUser = (user: any): void => {\n  try {\n    sessionStorage.setItem(USER_KEY, JSON.stringify(user));\n  } catch (error) {\n    console.error('Failed to store user data:', error);\n    throw new Error('Unable to store user information');\n  }\n};\n\n/**\n * Retrieve user information from sessionStorage\n * @returns User object or null if not found\n */\nexport const getUser = (): any | null => {\n  try {\n    const userData = sessionStorage.getItem(USER_KEY);\n    return userData ? JSON.parse(userData) : null;\n  } catch (error) {\n    console.error('Failed to retrieve user data:', error);\n    return null;\n  }\n};\n\n/**\n * Remove the JWT token from sessionStorage\n */\nexport const removeToken = (): void => {\n  try {\n    sessionStorage.removeItem(TOKEN_KEY);\n  } catch (error) {\n    console.error('Failed to remove token:', error);\n  }\n};\n\n/**\n * Remove user information from sessionStorage\n */\nexport const removeUser = (): void => {\n  try {\n    sessionStorage.removeItem(USER_KEY);\n  } catch (error) {\n    console.error('Failed to remove user data:', error);\n  }\n};\n\n/**\n * Clear all authentication data from sessionStorage\n */\nexport const clearAuthData = (): void => {\n  removeToken();\n  removeUser();\n};\n\n/**\n * Check if a valid token exists in storage\n * @returns boolean indicating if token exists\n */\nexport const hasValidToken = (): boolean => {\n  const token = getToken();\n  return token !== null && token.length > 0;\n};\n\n/**\n * Get the Authorization header value for API requests\n * @returns Authorization header string or null\n */\nexport const getAuthHeader = (): string | null => {\n  const token = getToken();\n  return token ? `Bearer ${token}` : null;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}