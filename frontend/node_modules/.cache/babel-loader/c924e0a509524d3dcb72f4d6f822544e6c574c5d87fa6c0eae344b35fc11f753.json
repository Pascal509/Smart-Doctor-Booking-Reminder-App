{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Smart-Doctor-Booking-Reminder-App\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// Authentication Context for global state management\n\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { login as apiLogin, validateToken, logout as apiLogout } from '../api/clients/authApi';\nimport { getToken, getUser, clearAuthData } from '../utils/tokenStorage';\n\n// Initial authentication state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialAuthState = {\n  isAuthenticated: false,\n  user: null,\n  token: null,\n  loading: true,\n  // Start with loading true to check existing session\n  error: null\n};\n\n// Authentication action types\n\n// Authentication reducer\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOGIN_START':\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false,\n        error: null\n      };\n    case 'LOGIN_FAILURE':\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        token: null,\n        loading: false,\n        error: action.payload\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        token: null,\n        loading: false,\n        error: null\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case 'RESTORE_SESSION':\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\n\n// Create the context\nconst AuthContext = /*#__PURE__*/createContext(undefined);\n\n// AuthProvider component props\n\n// AuthProvider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [authState, dispatch] = useReducer(authReducer, initialAuthState);\n\n  // Check for existing session on mount\n  useEffect(() => {\n    const checkExistingSession = async () => {\n      try {\n        const existingToken = getToken();\n        const existingUser = getUser();\n        if (existingToken && existingUser) {\n          // Validate token with backend\n          try {\n            const validationResult = await validateToken();\n            if (validationResult.valid) {\n              // Session is valid, restore it\n              dispatch({\n                type: 'RESTORE_SESSION',\n                payload: {\n                  user: {\n                    user_id: validationResult.user_id,\n                    username: validationResult.username,\n                    role: validationResult.role\n                  },\n                  token: existingToken\n                }\n              });\n            } else {\n              // Token is invalid, clear storage\n              clearAuthData();\n              dispatch({\n                type: 'SET_LOADING',\n                payload: false\n              });\n            }\n          } catch (error) {\n            // Token validation failed, clear storage\n            clearAuthData();\n            dispatch({\n              type: 'SET_LOADING',\n              payload: false\n            });\n          }\n        } else {\n          // No existing session\n          dispatch({\n            type: 'SET_LOADING',\n            payload: false\n          });\n        }\n      } catch (error) {\n        console.error('Error checking existing session:', error);\n        dispatch({\n          type: 'SET_LOADING',\n          payload: false\n        });\n      }\n    };\n    checkExistingSession();\n  }, []);\n\n  // Login function\n  const login = async credentials => {\n    dispatch({\n      type: 'LOGIN_START'\n    });\n    try {\n      const loginResponse = await apiLogin(credentials);\n      const user = {\n        user_id: loginResponse.user_id,\n        username: loginResponse.username,\n        role: loginResponse.role\n      };\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        payload: {\n          user,\n          token: loginResponse.token\n        }\n      });\n    } catch (error) {\n      const errorMessage = error.message || 'Login failed. Please try again.';\n      dispatch({\n        type: 'LOGIN_FAILURE',\n        payload: errorMessage\n      });\n      throw error; // Re-throw so components can handle it\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      // Call backend logout (optional, for token blacklisting)\n      await apiLogout();\n    } catch (error) {\n      console.warn('Backend logout failed:', error);\n    } finally {\n      // Always clear local data\n      clearAuthData();\n      dispatch({\n        type: 'LOGOUT'\n      });\n    }\n  };\n\n  // Clear error function\n  const clearError = () => {\n    dispatch({\n      type: 'CLEAR_ERROR'\n    });\n  };\n\n  // Context value\n  const contextValue = {\n    authState,\n    login,\n    logout,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the auth context\n_s(AuthProvider, \"gligvNWm4ZLM98FlvS0I74RJVak=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// Export the context for advanced use cases\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport { AuthContext };\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","login","apiLogin","validateToken","logout","apiLogout","getToken","getUser","clearAuthData","jsxDEV","_jsxDEV","initialAuthState","isAuthenticated","user","token","loading","error","authReducer","state","action","type","payload","AuthContext","undefined","AuthProvider","children","_s","authState","dispatch","checkExistingSession","existingToken","existingUser","validationResult","valid","user_id","username","role","console","credentials","loginResponse","errorMessage","message","warn","clearError","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/HP/Smart-Doctor-Booking-Reminder-App/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["// Authentication Context for global state management\n\nimport React, { createContext, useContext, useReducer, useEffect, ReactNode } from 'react';\nimport { AuthState, AuthContextType, LoginData, AuthUser } from '../api/types/auth';\nimport { login as apiLogin, validateToken, logout as apiLogout } from '../api/clients/authApi';\nimport { getToken, getUser, clearAuthData } from '../utils/tokenStorage';\n\n// Initial authentication state\nconst initialAuthState: AuthState = {\n  isAuthenticated: false,\n  user: null,\n  token: null,\n  loading: true, // Start with loading true to check existing session\n  error: null,\n};\n\n// Authentication action types\ntype AuthAction =\n  | { type: 'LOGIN_START' }\n  | { type: 'LOGIN_SUCCESS'; payload: { user: AuthUser; token: string } }\n  | { type: 'LOGIN_FAILURE'; payload: string }\n  | { type: 'LOGOUT' }\n  | { type: 'CLEAR_ERROR' }\n  | { type: 'SET_LOADING'; payload: boolean }\n  | { type: 'RESTORE_SESSION'; payload: { user: AuthUser; token: string } };\n\n// Authentication reducer\nconst authReducer = (state: AuthState, action: AuthAction): AuthState => {\n  switch (action.type) {\n    case 'LOGIN_START':\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    \n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false,\n        error: null,\n      };\n    \n    case 'LOGIN_FAILURE':\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        token: null,\n        loading: false,\n        error: action.payload,\n      };\n    \n    case 'LOGOUT':\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        token: null,\n        loading: false,\n        error: null,\n      };\n    \n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null,\n      };\n    \n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload,\n      };\n    \n    case 'RESTORE_SESSION':\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false,\n        error: null,\n      };\n    \n    default:\n      return state;\n  }\n};\n\n// Create the context\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// AuthProvider component props\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\n// AuthProvider component\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [authState, dispatch] = useReducer(authReducer, initialAuthState);\n\n  // Check for existing session on mount\n  useEffect(() => {\n    const checkExistingSession = async () => {\n      try {\n        const existingToken = getToken();\n        const existingUser = getUser();\n\n        if (existingToken && existingUser) {\n          // Validate token with backend\n          try {\n            const validationResult = await validateToken();\n            \n            if (validationResult.valid) {\n              // Session is valid, restore it\n              dispatch({\n                type: 'RESTORE_SESSION',\n                payload: {\n                  user: {\n                    user_id: validationResult.user_id,\n                    username: validationResult.username,\n                    role: validationResult.role,\n                  },\n                  token: existingToken,\n                },\n              });\n            } else {\n              // Token is invalid, clear storage\n              clearAuthData();\n              dispatch({ type: 'SET_LOADING', payload: false });\n            }\n          } catch (error) {\n            // Token validation failed, clear storage\n            clearAuthData();\n            dispatch({ type: 'SET_LOADING', payload: false });\n          }\n        } else {\n          // No existing session\n          dispatch({ type: 'SET_LOADING', payload: false });\n        }\n      } catch (error) {\n        console.error('Error checking existing session:', error);\n        dispatch({ type: 'SET_LOADING', payload: false });\n      }\n    };\n\n    checkExistingSession();\n  }, []);\n\n  // Login function\n  const login = async (credentials: LoginData): Promise<void> => {\n    dispatch({ type: 'LOGIN_START' });\n\n    try {\n      const loginResponse = await apiLogin(credentials);\n      \n      const user: AuthUser = {\n        user_id: loginResponse.user_id,\n        username: loginResponse.username,\n        role: loginResponse.role,\n      };\n\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        payload: {\n          user,\n          token: loginResponse.token,\n        },\n      });\n    } catch (error: any) {\n      const errorMessage = error.message || 'Login failed. Please try again.';\n      dispatch({\n        type: 'LOGIN_FAILURE',\n        payload: errorMessage,\n      });\n      throw error; // Re-throw so components can handle it\n    }\n  };\n\n  // Logout function\n  const logout = async (): Promise<void> => {\n    try {\n      // Call backend logout (optional, for token blacklisting)\n      await apiLogout();\n    } catch (error) {\n      console.warn('Backend logout failed:', error);\n    } finally {\n      // Always clear local data\n      clearAuthData();\n      dispatch({ type: 'LOGOUT' });\n    }\n  };\n\n  // Clear error function\n  const clearError = (): void => {\n    dispatch({ type: 'CLEAR_ERROR' });\n  };\n\n  // Context value\n  const contextValue: AuthContextType = {\n    authState,\n    login,\n    logout,\n    clearError,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Custom hook to use the auth context\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  \n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  \n  return context;\n};\n\n// Export the context for advanced use cases\nexport { AuthContext };"],"mappings":";;;AAAA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,QAAmB,OAAO;AAE1F,SAASC,KAAK,IAAIC,QAAQ,EAAEC,aAAa,EAAEC,MAAM,IAAIC,SAAS,QAAQ,wBAAwB;AAC9F,SAASC,QAAQ,EAAEC,OAAO,EAAEC,aAAa,QAAQ,uBAAuB;;AAExE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,gBAA2B,GAAG;EAClCC,eAAe,EAAE,KAAK;EACtBC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,IAAI;EACXC,OAAO,EAAE,IAAI;EAAE;EACfC,KAAK,EAAE;AACT,CAAC;;AAED;;AAUA;AACA,MAAMC,WAAW,GAAGA,CAACC,KAAgB,EAAEC,MAAkB,KAAgB;EACvE,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,aAAa;MAChB,OAAO;QACL,GAAGF,KAAK;QACRH,OAAO,EAAE,IAAI;QACbC,KAAK,EAAE;MACT,CAAC;IAEH,KAAK,eAAe;MAClB,OAAO;QACL,GAAGE,KAAK;QACRN,eAAe,EAAE,IAAI;QACrBC,IAAI,EAAEM,MAAM,CAACE,OAAO,CAACR,IAAI;QACzBC,KAAK,EAAEK,MAAM,CAACE,OAAO,CAACP,KAAK;QAC3BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IAEH,KAAK,eAAe;MAClB,OAAO;QACL,GAAGE,KAAK;QACRN,eAAe,EAAE,KAAK;QACtBC,IAAI,EAAE,IAAI;QACVC,KAAK,EAAE,IAAI;QACXC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAEG,MAAM,CAACE;MAChB,CAAC;IAEH,KAAK,QAAQ;MACX,OAAO;QACL,GAAGH,KAAK;QACRN,eAAe,EAAE,KAAK;QACtBC,IAAI,EAAE,IAAI;QACVC,KAAK,EAAE,IAAI;QACXC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IAEH,KAAK,aAAa;MAChB,OAAO;QACL,GAAGE,KAAK;QACRF,KAAK,EAAE;MACT,CAAC;IAEH,KAAK,aAAa;MAChB,OAAO;QACL,GAAGE,KAAK;QACRH,OAAO,EAAEI,MAAM,CAACE;MAClB,CAAC;IAEH,KAAK,iBAAiB;MACpB,OAAO;QACL,GAAGH,KAAK;QACRN,eAAe,EAAE,IAAI;QACrBC,IAAI,EAAEM,MAAM,CAACE,OAAO,CAACR,IAAI;QACzBC,KAAK,EAAEK,MAAM,CAACE,OAAO,CAACP,KAAK;QAC3BC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IAEH;MACE,OAAOE,KAAK;EAChB;AACF,CAAC;;AAED;AACA,MAAMI,WAAW,gBAAGzB,aAAa,CAA8B0B,SAAS,CAAC;;AAEzE;;AAKA;AACA,OAAO,MAAMC,YAAyC,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACzE,MAAM,CAACC,SAAS,EAAEC,QAAQ,CAAC,GAAG7B,UAAU,CAACkB,WAAW,EAAEN,gBAAgB,CAAC;;EAEvE;EACAX,SAAS,CAAC,MAAM;IACd,MAAM6B,oBAAoB,GAAG,MAAAA,CAAA,KAAY;MACvC,IAAI;QACF,MAAMC,aAAa,GAAGxB,QAAQ,CAAC,CAAC;QAChC,MAAMyB,YAAY,GAAGxB,OAAO,CAAC,CAAC;QAE9B,IAAIuB,aAAa,IAAIC,YAAY,EAAE;UACjC;UACA,IAAI;YACF,MAAMC,gBAAgB,GAAG,MAAM7B,aAAa,CAAC,CAAC;YAE9C,IAAI6B,gBAAgB,CAACC,KAAK,EAAE;cAC1B;cACAL,QAAQ,CAAC;gBACPR,IAAI,EAAE,iBAAiB;gBACvBC,OAAO,EAAE;kBACPR,IAAI,EAAE;oBACJqB,OAAO,EAAEF,gBAAgB,CAACE,OAAO;oBACjCC,QAAQ,EAAEH,gBAAgB,CAACG,QAAQ;oBACnCC,IAAI,EAAEJ,gBAAgB,CAACI;kBACzB,CAAC;kBACDtB,KAAK,EAAEgB;gBACT;cACF,CAAC,CAAC;YACJ,CAAC,MAAM;cACL;cACAtB,aAAa,CAAC,CAAC;cACfoB,QAAQ,CAAC;gBAAER,IAAI,EAAE,aAAa;gBAAEC,OAAO,EAAE;cAAM,CAAC,CAAC;YACnD;UACF,CAAC,CAAC,OAAOL,KAAK,EAAE;YACd;YACAR,aAAa,CAAC,CAAC;YACfoB,QAAQ,CAAC;cAAER,IAAI,EAAE,aAAa;cAAEC,OAAO,EAAE;YAAM,CAAC,CAAC;UACnD;QACF,CAAC,MAAM;UACL;UACAO,QAAQ,CAAC;YAAER,IAAI,EAAE,aAAa;YAAEC,OAAO,EAAE;UAAM,CAAC,CAAC;QACnD;MACF,CAAC,CAAC,OAAOL,KAAK,EAAE;QACdqB,OAAO,CAACrB,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;QACxDY,QAAQ,CAAC;UAAER,IAAI,EAAE,aAAa;UAAEC,OAAO,EAAE;QAAM,CAAC,CAAC;MACnD;IACF,CAAC;IAEDQ,oBAAoB,CAAC,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM5B,KAAK,GAAG,MAAOqC,WAAsB,IAAoB;IAC7DV,QAAQ,CAAC;MAAER,IAAI,EAAE;IAAc,CAAC,CAAC;IAEjC,IAAI;MACF,MAAMmB,aAAa,GAAG,MAAMrC,QAAQ,CAACoC,WAAW,CAAC;MAEjD,MAAMzB,IAAc,GAAG;QACrBqB,OAAO,EAAEK,aAAa,CAACL,OAAO;QAC9BC,QAAQ,EAAEI,aAAa,CAACJ,QAAQ;QAChCC,IAAI,EAAEG,aAAa,CAACH;MACtB,CAAC;MAEDR,QAAQ,CAAC;QACPR,IAAI,EAAE,eAAe;QACrBC,OAAO,EAAE;UACPR,IAAI;UACJC,KAAK,EAAEyB,aAAa,CAACzB;QACvB;MACF,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOE,KAAU,EAAE;MACnB,MAAMwB,YAAY,GAAGxB,KAAK,CAACyB,OAAO,IAAI,iCAAiC;MACvEb,QAAQ,CAAC;QACPR,IAAI,EAAE,eAAe;QACrBC,OAAO,EAAEmB;MACX,CAAC,CAAC;MACF,MAAMxB,KAAK,CAAC,CAAC;IACf;EACF,CAAC;;EAED;EACA,MAAMZ,MAAM,GAAG,MAAAA,CAAA,KAA2B;IACxC,IAAI;MACF;MACA,MAAMC,SAAS,CAAC,CAAC;IACnB,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdqB,OAAO,CAACK,IAAI,CAAC,wBAAwB,EAAE1B,KAAK,CAAC;IAC/C,CAAC,SAAS;MACR;MACAR,aAAa,CAAC,CAAC;MACfoB,QAAQ,CAAC;QAAER,IAAI,EAAE;MAAS,CAAC,CAAC;IAC9B;EACF,CAAC;;EAED;EACA,MAAMuB,UAAU,GAAGA,CAAA,KAAY;IAC7Bf,QAAQ,CAAC;MAAER,IAAI,EAAE;IAAc,CAAC,CAAC;EACnC,CAAC;;EAED;EACA,MAAMwB,YAA6B,GAAG;IACpCjB,SAAS;IACT1B,KAAK;IACLG,MAAM;IACNuC;EACF,CAAC;EAED,oBACEjC,OAAA,CAACY,WAAW,CAACuB,QAAQ;IAACC,KAAK,EAAEF,YAAa;IAAAnB,QAAA,EACvCA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAAxB,EAAA,CAnHaF,YAAyC;AAAA2B,EAAA,GAAzC3B,YAAyC;AAoHtD,OAAO,MAAM4B,OAAO,GAAGA,CAAA,KAAuB;EAAAC,GAAA;EAC5C,MAAMC,OAAO,GAAGxD,UAAU,CAACwB,WAAW,CAAC;EAEvC,IAAIgC,OAAO,KAAK/B,SAAS,EAAE;IACzB,MAAM,IAAIgC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EAEA,OAAOD,OAAO;AAChB,CAAC;;AAED;AAAAD,GAAA,CAVaD,OAAO;AAWpB,SAAS9B,WAAW;AAAG,IAAA6B,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}