{"ast":null,"code":"import apiClient from '../clients/apiClient';\n\n/**\n * Health check response interface\n */\n\n/**\n * Health check result with additional metadata\n */\n\n/**\n * Utility function to check the health of the backend API\n * Calls GET /health endpoint and returns health status information\n * \n * @returns Promise<HealthCheckResult> - Health check result with status and metadata\n * \n * @example\n * ```typescript\n * const healthResult = await checkHealth();\n * if (healthResult.isHealthy) {\n *   console.log('API is healthy:', healthResult.response);\n * } else {\n *   console.error('API health check failed:', healthResult.error);\n * }\n * ```\n */\nexport const checkHealth = async () => {\n  const startTime = Date.now();\n  const timestamp = new Date();\n  try {\n    const response = await apiClient.get('/health');\n    const responseTime = Date.now() - startTime;\n    return {\n      isHealthy: response.status === 'healthy',\n      response,\n      responseTime,\n      timestamp\n    };\n  } catch (error) {\n    const responseTime = Date.now() - startTime;\n\n    // Extract meaningful error message\n    let errorMessage = 'Health check failed';\n    if (error.response) {\n      // Server responded with error status\n      errorMessage = `API returned ${error.response.status}: ${error.response.statusText}`;\n    } else if (error.request) {\n      // Request was made but no response received\n      errorMessage = 'No response from API server';\n    } else {\n      // Something else happened\n      errorMessage = error.message || 'Unknown error occurred';\n    }\n    return {\n      isHealthy: false,\n      error: errorMessage,\n      responseTime,\n      timestamp\n    };\n  }\n};\n\n/**\n * Utility function to perform periodic health checks\n * Useful for continuous monitoring in development or debugging panels\n * \n * @param intervalMs - Interval in milliseconds between health checks (default: 30000ms = 30s)\n * @param onHealthChange - Callback function called when health status changes\n * @returns Function to stop the periodic health checks\n * \n * @example\n * ```typescript\n * const stopHealthCheck = startPeriodicHealthCheck(10000, (result) => {\n *   console.log('Health status:', result.isHealthy ? 'Healthy' : 'Unhealthy');\n * });\n * \n * // Stop monitoring after some time\n * setTimeout(() => stopHealthCheck(), 60000);\n * ```\n */\nexport const startPeriodicHealthCheck = (intervalMs = 30000, onHealthChange) => {\n  let lastHealthStatus = null;\n  const performCheck = async () => {\n    try {\n      const result = await checkHealth();\n\n      // Call callback if health status changed or if it's the first check\n      if (onHealthChange && (lastHealthStatus === null || lastHealthStatus !== result.isHealthy)) {\n        onHealthChange(result);\n      }\n      lastHealthStatus = result.isHealthy;\n    } catch (error) {\n      console.error('Periodic health check error:', error);\n    }\n  };\n\n  // Perform initial check\n  performCheck();\n\n  // Set up interval\n  const intervalId = setInterval(performCheck, intervalMs);\n\n  // Return cleanup function\n  return () => {\n    clearInterval(intervalId);\n  };\n};\n\n/**\n * Format health check result for display purposes\n * Useful for debugging panels or status displays\n * \n * @param result - Health check result to format\n * @returns Formatted string representation of the health status\n */\nexport const formatHealthStatus = result => {\n  const status = result.isHealthy ? '✅ Healthy' : '❌ Unhealthy';\n  const responseTime = `${result.responseTime}ms`;\n  const timestamp = result.timestamp.toLocaleTimeString();\n  if (result.isHealthy && result.response) {\n    const uptime = result.response.uptime ? ` | Uptime: ${Math.floor(result.response.uptime / 3600)}h` : '';\n    const version = result.response.version ? ` | v${result.response.version}` : '';\n    return `${status} | Response: ${responseTime} | ${timestamp}${uptime}${version}`;\n  } else {\n    return `${status} | Response: ${responseTime} | ${timestamp} | Error: ${result.error}`;\n  }\n};","map":{"version":3,"names":["apiClient","checkHealth","startTime","Date","now","timestamp","response","get","responseTime","isHealthy","status","error","errorMessage","statusText","request","message","startPeriodicHealthCheck","intervalMs","onHealthChange","lastHealthStatus","performCheck","result","console","intervalId","setInterval","clearInterval","formatHealthStatus","toLocaleTimeString","uptime","Math","floor","version"],"sources":["C:/Users/HP/Smart-Doctor-Booking-Reminder-App/frontend/src/api/health/healthCheck.ts"],"sourcesContent":["import apiClient from '../clients/apiClient';\n\n/**\n * Health check response interface\n */\nexport interface HealthCheckResponse {\n  status: 'healthy' | 'unhealthy';\n  timestamp: string;\n  uptime?: number;\n  version?: string;\n  database?: {\n    status: 'connected' | 'disconnected';\n    responseTime?: number;\n  };\n  services?: {\n    [key: string]: 'up' | 'down';\n  };\n}\n\n/**\n * Health check result with additional metadata\n */\nexport interface HealthCheckResult {\n  isHealthy: boolean;\n  response?: HealthCheckResponse;\n  error?: string;\n  responseTime: number;\n  timestamp: Date;\n}\n\n/**\n * Utility function to check the health of the backend API\n * Calls GET /health endpoint and returns health status information\n * \n * @returns Promise<HealthCheckResult> - Health check result with status and metadata\n * \n * @example\n * ```typescript\n * const healthResult = await checkHealth();\n * if (healthResult.isHealthy) {\n *   console.log('API is healthy:', healthResult.response);\n * } else {\n *   console.error('API health check failed:', healthResult.error);\n * }\n * ```\n */\nexport const checkHealth = async (): Promise<HealthCheckResult> => {\n  const startTime = Date.now();\n  const timestamp = new Date();\n\n  try {\n    const response = await apiClient.get<HealthCheckResponse>('/health');\n    const responseTime = Date.now() - startTime;\n\n    return {\n      isHealthy: response.status === 'healthy',\n      response,\n      responseTime,\n      timestamp\n    };\n  } catch (error: any) {\n    const responseTime = Date.now() - startTime;\n    \n    // Extract meaningful error message\n    let errorMessage = 'Health check failed';\n    \n    if (error.response) {\n      // Server responded with error status\n      errorMessage = `API returned ${error.response.status}: ${error.response.statusText}`;\n    } else if (error.request) {\n      // Request was made but no response received\n      errorMessage = 'No response from API server';\n    } else {\n      // Something else happened\n      errorMessage = error.message || 'Unknown error occurred';\n    }\n\n    return {\n      isHealthy: false,\n      error: errorMessage,\n      responseTime,\n      timestamp\n    };\n  }\n};\n\n/**\n * Utility function to perform periodic health checks\n * Useful for continuous monitoring in development or debugging panels\n * \n * @param intervalMs - Interval in milliseconds between health checks (default: 30000ms = 30s)\n * @param onHealthChange - Callback function called when health status changes\n * @returns Function to stop the periodic health checks\n * \n * @example\n * ```typescript\n * const stopHealthCheck = startPeriodicHealthCheck(10000, (result) => {\n *   console.log('Health status:', result.isHealthy ? 'Healthy' : 'Unhealthy');\n * });\n * \n * // Stop monitoring after some time\n * setTimeout(() => stopHealthCheck(), 60000);\n * ```\n */\nexport const startPeriodicHealthCheck = (\n  intervalMs: number = 30000,\n  onHealthChange?: (result: HealthCheckResult) => void\n): (() => void) => {\n  let lastHealthStatus: boolean | null = null;\n  \n  const performCheck = async () => {\n    try {\n      const result = await checkHealth();\n      \n      // Call callback if health status changed or if it's the first check\n      if (onHealthChange && (lastHealthStatus === null || lastHealthStatus !== result.isHealthy)) {\n        onHealthChange(result);\n      }\n      \n      lastHealthStatus = result.isHealthy;\n    } catch (error) {\n      console.error('Periodic health check error:', error);\n    }\n  };\n\n  // Perform initial check\n  performCheck();\n  \n  // Set up interval\n  const intervalId = setInterval(performCheck, intervalMs);\n  \n  // Return cleanup function\n  return () => {\n    clearInterval(intervalId);\n  };\n};\n\n/**\n * Format health check result for display purposes\n * Useful for debugging panels or status displays\n * \n * @param result - Health check result to format\n * @returns Formatted string representation of the health status\n */\nexport const formatHealthStatus = (result: HealthCheckResult): string => {\n  const status = result.isHealthy ? '✅ Healthy' : '❌ Unhealthy';\n  const responseTime = `${result.responseTime}ms`;\n  const timestamp = result.timestamp.toLocaleTimeString();\n  \n  if (result.isHealthy && result.response) {\n    const uptime = result.response.uptime ? ` | Uptime: ${Math.floor(result.response.uptime / 3600)}h` : '';\n    const version = result.response.version ? ` | v${result.response.version}` : '';\n    return `${status} | Response: ${responseTime} | ${timestamp}${uptime}${version}`;\n  } else {\n    return `${status} | Response: ${responseTime} | ${timestamp} | Error: ${result.error}`;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}