{"ast":null,"code":"import apiClient from'../clients/apiClient';/**\n * Cache health check response interface\n *//**\n * Cache health check result with additional metadata\n *//**\n * Utility function to check the health of the Redis cache\n * Calls GET /api/v1/cache/health endpoint and returns cache status information\n * \n * @returns Promise<CacheHealthResult> - Cache health check result with status and metadata\n * \n * @example\n * ```typescript\n * const cacheResult = await checkCacheHealth();\n * if (cacheResult.isConnected) {\n *   console.log('Cache is connected:', cacheResult.response);\n * } else {\n *   console.error('Cache health check failed:', cacheResult.error);\n * }\n * ```\n */export const checkCacheHealth=async()=>{const startTime=Date.now();const timestamp=new Date();try{const response=await apiClient.get('/api/v1/cache/health');const responseTime=Date.now()-startTime;return{isConnected:response.status==='connected',response,responseTime,timestamp};}catch(error){const responseTime=Date.now()-startTime;// Extract meaningful error message\nlet errorMessage='Cache health check failed';if(error.response){// Server responded with error status\nerrorMessage=\"Cache API returned \".concat(error.response.status,\": \").concat(error.response.statusText);}else if(error.request){// Request was made but no response received\nerrorMessage='No response from cache health endpoint';}else{// Something else happened\nerrorMessage=error.message||'Unknown cache health check error';}return{isConnected:false,error:errorMessage,responseTime,timestamp};}};/**\n * Utility function to perform periodic cache health checks\n * Useful for continuous monitoring of cache status\n * \n * @param intervalMs - Interval in milliseconds between health checks (default: 30000ms = 30s)\n * @param onStatusChange - Callback function called when cache status changes\n * @returns Function to stop the periodic health checks\n * \n * @example\n * ```typescript\n * const stopCacheCheck = startPeriodicCacheHealthCheck(15000, (result) => {\n *   console.log('Cache status:', result.isConnected ? 'Connected' : 'Disconnected');\n * });\n * \n * // Stop monitoring after some time\n * setTimeout(() => stopCacheCheck(), 60000);\n * ```\n */export const startPeriodicCacheHealthCheck=function(){let intervalMs=arguments.length>0&&arguments[0]!==undefined?arguments[0]:30000;let onStatusChange=arguments.length>1?arguments[1]:undefined;let lastConnectionStatus=null;const performCheck=async()=>{try{const result=await checkCacheHealth();// Call callback if connection status changed or if it's the first check\nif(onStatusChange&&(lastConnectionStatus===null||lastConnectionStatus!==result.isConnected)){onStatusChange(result);}lastConnectionStatus=result.isConnected;}catch(error){console.error('Periodic cache health check error:',error);}};// Perform initial check\nperformCheck();// Set up interval\nconst intervalId=setInterval(performCheck,intervalMs);// Return cleanup function\nreturn()=>{clearInterval(intervalId);};};/**\n * Format cache health check result for display purposes\n * Useful for status displays or debugging panels\n * \n * @param result - Cache health check result to format\n * @returns Formatted string representation of the cache status\n */export const formatCacheStatus=result=>{const status=result.isConnected?'ðŸŸ¢ Connected':'ðŸ”´ Disconnected';const responseTime=\"\".concat(result.responseTime,\"ms\");const timestamp=result.timestamp.toLocaleTimeString();if(result.isConnected&&result.response){const memory=result.response.memory?\" | Memory: \".concat(result.response.memory.percentage,\"%\"):'';const hitRate=result.response.stats?\" | Hit Rate: \".concat((result.response.stats.hitRate*100).toFixed(1),\"%\"):'';return\"\".concat(status,\" | Response: \").concat(responseTime,\" | \").concat(timestamp).concat(memory).concat(hitRate);}else{return\"\".concat(status,\" | Response: \").concat(responseTime,\" | \").concat(timestamp,\" | Error: \").concat(result.error);}};","map":{"version":3,"names":["apiClient","checkCacheHealth","startTime","Date","now","timestamp","response","get","responseTime","isConnected","status","error","errorMessage","concat","statusText","request","message","startPeriodicCacheHealthCheck","intervalMs","arguments","length","undefined","onStatusChange","lastConnectionStatus","performCheck","result","console","intervalId","setInterval","clearInterval","formatCacheStatus","toLocaleTimeString","memory","percentage","hitRate","stats","toFixed"],"sources":["C:/Users/HP/Smart-Doctor-Booking-Reminder-App/frontend/src/api/health/cacheHealthCheck.ts"],"sourcesContent":["import apiClient from '../clients/apiClient';\n\n/**\n * Cache health check response interface\n */\nexport interface CacheHealthResponse {\n  status: 'connected' | 'disconnected';\n  timestamp: string;\n  responseTime?: number;\n  cacheType?: string;\n  version?: string;\n  memory?: {\n    used: number;\n    total: number;\n    percentage: number;\n  };\n  connections?: {\n    active: number;\n    total: number;\n  };\n  stats?: {\n    hits: number;\n    misses: number;\n    hitRate: number;\n  };\n}\n\n/**\n * Cache health check result with additional metadata\n */\nexport interface CacheHealthResult {\n  isConnected: boolean;\n  response?: CacheHealthResponse;\n  error?: string;\n  responseTime: number;\n  timestamp: Date;\n}\n\n/**\n * Utility function to check the health of the Redis cache\n * Calls GET /api/v1/cache/health endpoint and returns cache status information\n * \n * @returns Promise<CacheHealthResult> - Cache health check result with status and metadata\n * \n * @example\n * ```typescript\n * const cacheResult = await checkCacheHealth();\n * if (cacheResult.isConnected) {\n *   console.log('Cache is connected:', cacheResult.response);\n * } else {\n *   console.error('Cache health check failed:', cacheResult.error);\n * }\n * ```\n */\nexport const checkCacheHealth = async (): Promise<CacheHealthResult> => {\n  const startTime = Date.now();\n  const timestamp = new Date();\n\n  try {\n    const response = await apiClient.get<CacheHealthResponse>('/api/v1/cache/health');\n    const responseTime = Date.now() - startTime;\n\n    return {\n      isConnected: response.status === 'connected',\n      response,\n      responseTime,\n      timestamp\n    };\n  } catch (error: any) {\n    const responseTime = Date.now() - startTime;\n    \n    // Extract meaningful error message\n    let errorMessage = 'Cache health check failed';\n    \n    if (error.response) {\n      // Server responded with error status\n      errorMessage = `Cache API returned ${error.response.status}: ${error.response.statusText}`;\n    } else if (error.request) {\n      // Request was made but no response received\n      errorMessage = 'No response from cache health endpoint';\n    } else {\n      // Something else happened\n      errorMessage = error.message || 'Unknown cache health check error';\n    }\n\n    return {\n      isConnected: false,\n      error: errorMessage,\n      responseTime,\n      timestamp\n    };\n  }\n};\n\n/**\n * Utility function to perform periodic cache health checks\n * Useful for continuous monitoring of cache status\n * \n * @param intervalMs - Interval in milliseconds between health checks (default: 30000ms = 30s)\n * @param onStatusChange - Callback function called when cache status changes\n * @returns Function to stop the periodic health checks\n * \n * @example\n * ```typescript\n * const stopCacheCheck = startPeriodicCacheHealthCheck(15000, (result) => {\n *   console.log('Cache status:', result.isConnected ? 'Connected' : 'Disconnected');\n * });\n * \n * // Stop monitoring after some time\n * setTimeout(() => stopCacheCheck(), 60000);\n * ```\n */\nexport const startPeriodicCacheHealthCheck = (\n  intervalMs: number = 30000,\n  onStatusChange?: (result: CacheHealthResult) => void\n): (() => void) => {\n  let lastConnectionStatus: boolean | null = null;\n  \n  const performCheck = async () => {\n    try {\n      const result = await checkCacheHealth();\n      \n      // Call callback if connection status changed or if it's the first check\n      if (onStatusChange && (lastConnectionStatus === null || lastConnectionStatus !== result.isConnected)) {\n        onStatusChange(result);\n      }\n      \n      lastConnectionStatus = result.isConnected;\n    } catch (error) {\n      console.error('Periodic cache health check error:', error);\n    }\n  };\n\n  // Perform initial check\n  performCheck();\n  \n  // Set up interval\n  const intervalId = setInterval(performCheck, intervalMs);\n  \n  // Return cleanup function\n  return () => {\n    clearInterval(intervalId);\n  };\n};\n\n/**\n * Format cache health check result for display purposes\n * Useful for status displays or debugging panels\n * \n * @param result - Cache health check result to format\n * @returns Formatted string representation of the cache status\n */\nexport const formatCacheStatus = (result: CacheHealthResult): string => {\n  const status = result.isConnected ? 'ðŸŸ¢ Connected' : 'ðŸ”´ Disconnected';\n  const responseTime = `${result.responseTime}ms`;\n  const timestamp = result.timestamp.toLocaleTimeString();\n  \n  if (result.isConnected && result.response) {\n    const memory = result.response.memory ? ` | Memory: ${result.response.memory.percentage}%` : '';\n    const hitRate = result.response.stats ? ` | Hit Rate: ${(result.response.stats.hitRate * 100).toFixed(1)}%` : '';\n    return `${status} | Response: ${responseTime} | ${timestamp}${memory}${hitRate}`;\n  } else {\n    return `${status} | Response: ${responseTime} | ${timestamp} | Error: ${result.error}`;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}