{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { ApiError } from '../types/api';\nimport apiClient from '../utils/apiClient';\n\n/**\n * Custom hook for fetching and managing all doctors data\n * \n * @returns Object containing doctors array, loading state, error state, and refresh function\n */\nexport const useDoctorList = () => {\n  _s();\n  const [doctors, setDoctors] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  /**\n   * Fetch all doctors from the API\n   */\n  const fetchDoctors = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await apiClient.get('/api/v1/doctors');\n      setDoctors(response.data || []);\n    } catch (err) {\n      const errorMessage = err instanceof ApiError ? err.message : 'Failed to fetch doctors';\n      setError(errorMessage);\n      console.error('Error fetching doctors:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Refresh the doctors list\n   */\n  const refresh = () => {\n    fetchDoctors();\n  };\n\n  // Fetch doctors on component mount\n  useEffect(() => {\n    fetchDoctors();\n  }, []);\n  return {\n    doctors,\n    loading,\n    error,\n    refresh\n  };\n};\n_s(useDoctorList, \"JOh9bjoU1QR1F1cG84IgxjGHgyw=\");\nexport default useDoctorList;","map":{"version":3,"names":["useState","useEffect","ApiError","apiClient","useDoctorList","_s","doctors","setDoctors","loading","setLoading","error","setError","fetchDoctors","response","get","data","err","errorMessage","message","console","refresh"],"sources":["C:/Users/HP/Smart-Doctor-Booking-Reminder-App/frontend/src/hooks/useDoctorList.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Doctor, ApiError } from '../types/api';\nimport apiClient from '../utils/apiClient';\n\n/**\n * Custom hook for fetching and managing all doctors data\n * \n * @returns Object containing doctors array, loading state, error state, and refresh function\n */\nexport const useDoctorList = () => {\n  const [doctors, setDoctors] = useState<Doctor[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  /**\n   * Fetch all doctors from the API\n   */\n  const fetchDoctors = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await apiClient.get('/api/v1/doctors');\n      setDoctors(response.data || []);\n    } catch (err: any) {\n      const errorMessage = err instanceof ApiError \n        ? err.message \n        : 'Failed to fetch doctors';\n      setError(errorMessage);\n      console.error('Error fetching doctors:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Refresh the doctors list\n   */\n  const refresh = () => {\n    fetchDoctors();\n  };\n\n  // Fetch doctors on component mount\n  useEffect(() => {\n    fetchDoctors();\n  }, []);\n\n  return {\n    doctors,\n    loading,\n    error,\n    refresh\n  };\n};\n\nexport default useDoctorList;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAAiBC,QAAQ,QAAQ,cAAc;AAC/C,OAAOC,SAAS,MAAM,oBAAoB;;AAE1C;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAW,EAAE,CAAC;EACpD,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAU,IAAI,CAAC;EACrD,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAgB,IAAI,CAAC;;EAEvD;AACF;AACA;EACE,MAAMY,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACFH,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MAEd,MAAME,QAAQ,GAAG,MAAMV,SAAS,CAACW,GAAG,CAAC,iBAAiB,CAAC;MACvDP,UAAU,CAACM,QAAQ,CAACE,IAAI,IAAI,EAAE,CAAC;IACjC,CAAC,CAAC,OAAOC,GAAQ,EAAE;MACjB,MAAMC,YAAY,GAAGD,GAAG,YAAYd,QAAQ,GACxCc,GAAG,CAACE,OAAO,GACX,yBAAyB;MAC7BP,QAAQ,CAACM,YAAY,CAAC;MACtBE,OAAO,CAACT,KAAK,CAAC,yBAAyB,EAAEM,GAAG,CAAC;IAC/C,CAAC,SAAS;MACRP,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;AACF;AACA;EACE,MAAMW,OAAO,GAAGA,CAAA,KAAM;IACpBR,YAAY,CAAC,CAAC;EAChB,CAAC;;EAED;EACAX,SAAS,CAAC,MAAM;IACdW,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLN,OAAO;IACPE,OAAO;IACPE,KAAK;IACLU;EACF,CAAC;AACH,CAAC;AAACf,EAAA,CA5CWD,aAAa;AA8C1B,eAAeA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}