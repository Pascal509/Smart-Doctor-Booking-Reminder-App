{"ast":null,"code":"import{useState,useEffect}from'react';import{getAvailableSlots}from'../api/clients/appointmentApi';/**\n * Custom hook for fetching doctor availability time slots\n * \n * @param doctorId - The ID of the doctor to fetch availability for\n * @param date - The date to check availability (YYYY-MM-DD format)\n * @returns Object containing time slots, loading state, error state, and refresh function\n */export const useDoctorAvailability=(doctorId,date)=>{const[timeSlots,setTimeSlots]=useState([]);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);/**\n   * Fetch available time slots from the API\n   */const fetchAvailability=async()=>{if(!doctorId||!date){setTimeSlots([]);setLoading(false);return;}try{setLoading(true);setError(null);const availableSlots=await getAvailableSlots(doctorId,date);// Generate all possible time slots for the day (9 AM to 5 PM, 30-minute intervals)\nconst allSlots=generateTimeSlots(date);// Mark slots as available or unavailable based on API response\nconst slotsWithAvailability=allSlots.map(slot=>({time:slot,available:availableSlots.includes(slot),displayTime:formatTimeForDisplay(slot)}));setTimeSlots(slotsWithAvailability);}catch(err){const errorMessage=err.message||'Failed to fetch available time slots';setError(errorMessage);setTimeSlots([]);console.error('Error fetching doctor availability:',err);}finally{setLoading(false);}};/**\n   * Generate all possible time slots for a given date\n   * @param date - Date in YYYY-MM-DD format\n   * @returns Array of ISO 8601 time strings\n   */const generateTimeSlots=date=>{const slots=[];const baseDate=new Date(date+'T00:00:00');// Generate slots from 9 AM to 5 PM (30-minute intervals)\nfor(let hour=9;hour<17;hour++){for(let minute=0;minute<60;minute+=30){const slotTime=new Date(baseDate);slotTime.setHours(hour,minute,0,0);slots.push(slotTime.toISOString());}}return slots;};/**\n   * Format ISO time string for display\n   * @param isoTime - ISO 8601 time string\n   * @returns Formatted time string (e.g., \"2:30 PM\")\n   */const formatTimeForDisplay=isoTime=>{const date=new Date(isoTime);return date.toLocaleTimeString('en-US',{hour:'numeric',minute:'2-digit',hour12:true});};/**\n   * Refresh the availability data\n   */const refresh=()=>{fetchAvailability();};// Fetch availability when doctorId or date changes\nuseEffect(()=>{fetchAvailability();},[doctorId,date]);return{timeSlots,loading,error,refresh};};/**\n * Helper function to check if a time slot is in the past\n * @param isoTime - ISO 8601 time string\n * @returns True if the time slot is in the past\n */export const isTimeSlotInPast=isoTime=>{const slotTime=new Date(isoTime);const now=new Date();return slotTime<=now;};/**\n * Helper function to get the next available time slot\n * @param timeSlots - Array of time slots\n * @returns The next available time slot or null if none available\n */export const getNextAvailableSlot=timeSlots=>{const now=new Date();for(const slot of timeSlots){const slotTime=new Date(slot.time);if(slot.available&&slotTime>now){return slot;}}return null;};","map":{"version":3,"names":["useState","useEffect","getAvailableSlots","useDoctorAvailability","doctorId","date","timeSlots","setTimeSlots","loading","setLoading","error","setError","fetchAvailability","availableSlots","allSlots","generateTimeSlots","slotsWithAvailability","map","slot","time","available","includes","displayTime","formatTimeForDisplay","err","errorMessage","message","console","slots","baseDate","Date","hour","minute","slotTime","setHours","push","toISOString","isoTime","toLocaleTimeString","hour12","refresh","isTimeSlotInPast","now","getNextAvailableSlot"],"sources":["C:/Users/HP/Smart-Doctor-Booking-Reminder-App/frontend/src/hooks/useDoctorAvailability.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { getAvailableSlots } from '../api/clients/appointmentApi';\n\ninterface TimeSlot {\n  time: string; // ISO 8601 format\n  available: boolean;\n  displayTime: string; // Formatted time for display\n}\n\ninterface UseDoctorAvailabilityReturn {\n  timeSlots: TimeSlot[];\n  loading: boolean;\n  error: string | null;\n  refresh: () => void;\n}\n\n/**\n * Custom hook for fetching doctor availability time slots\n * \n * @param doctorId - The ID of the doctor to fetch availability for\n * @param date - The date to check availability (YYYY-MM-DD format)\n * @returns Object containing time slots, loading state, error state, and refresh function\n */\nexport const useDoctorAvailability = (\n  doctorId: number | null,\n  date: string\n): UseDoctorAvailabilityReturn => {\n  const [timeSlots, setTimeSlots] = useState<TimeSlot[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  /**\n   * Fetch available time slots from the API\n   */\n  const fetchAvailability = async () => {\n    if (!doctorId || !date) {\n      setTimeSlots([]);\n      setLoading(false);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const availableSlots = await getAvailableSlots(doctorId, date);\n      \n      // Generate all possible time slots for the day (9 AM to 5 PM, 30-minute intervals)\n      const allSlots = generateTimeSlots(date);\n      \n      // Mark slots as available or unavailable based on API response\n      const slotsWithAvailability = allSlots.map(slot => ({\n        time: slot,\n        available: availableSlots.includes(slot),\n        displayTime: formatTimeForDisplay(slot)\n      }));\n      \n      setTimeSlots(slotsWithAvailability);\n    } catch (err: any) {\n      const errorMessage = err.message || 'Failed to fetch available time slots';\n      setError(errorMessage);\n      setTimeSlots([]);\n      console.error('Error fetching doctor availability:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Generate all possible time slots for a given date\n   * @param date - Date in YYYY-MM-DD format\n   * @returns Array of ISO 8601 time strings\n   */\n  const generateTimeSlots = (date: string): string[] => {\n    const slots: string[] = [];\n    const baseDate = new Date(date + 'T00:00:00');\n    \n    // Generate slots from 9 AM to 5 PM (30-minute intervals)\n    for (let hour = 9; hour < 17; hour++) {\n      for (let minute = 0; minute < 60; minute += 30) {\n        const slotTime = new Date(baseDate);\n        slotTime.setHours(hour, minute, 0, 0);\n        slots.push(slotTime.toISOString());\n      }\n    }\n    \n    return slots;\n  };\n\n  /**\n   * Format ISO time string for display\n   * @param isoTime - ISO 8601 time string\n   * @returns Formatted time string (e.g., \"2:30 PM\")\n   */\n  const formatTimeForDisplay = (isoTime: string): string => {\n    const date = new Date(isoTime);\n    return date.toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true\n    });\n  };\n\n  /**\n   * Refresh the availability data\n   */\n  const refresh = () => {\n    fetchAvailability();\n  };\n\n  // Fetch availability when doctorId or date changes\n  useEffect(() => {\n    fetchAvailability();\n  }, [doctorId, date]);\n\n  return {\n    timeSlots,\n    loading,\n    error,\n    refresh\n  };\n};\n\n/**\n * Helper function to check if a time slot is in the past\n * @param isoTime - ISO 8601 time string\n * @returns True if the time slot is in the past\n */\nexport const isTimeSlotInPast = (isoTime: string): boolean => {\n  const slotTime = new Date(isoTime);\n  const now = new Date();\n  return slotTime <= now;\n};\n\n/**\n * Helper function to get the next available time slot\n * @param timeSlots - Array of time slots\n * @returns The next available time slot or null if none available\n */\nexport const getNextAvailableSlot = (timeSlots: TimeSlot[]): TimeSlot | null => {\n  const now = new Date();\n  \n  for (const slot of timeSlots) {\n    const slotTime = new Date(slot.time);\n    if (slot.available && slotTime > now) {\n      return slot;\n    }\n  }\n  \n  return null;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}