{"ast":null,"code":"import apiClient from '../utils/apiClient';\n\n/**\n * Fetches all doctors from the backend API\n * \n * @returns Promise<Doctor[]> - Array of all doctors\n * @throws Error - When the API request fails or returns an error\n */\nexport const getDoctors = async () => {\n  try {\n    const response = await apiClient.get('/doctors');\n    return response;\n  } catch (error) {\n    var _error$response;\n    if (error.status === 401) {\n      throw new Error('Authentication failed - please log in again');\n    }\n    const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.message) || error.message || 'Failed to fetch doctors';\n    throw new Error(message);\n  }\n};\n\n/**\n * Fetches doctors by specialty ID from the backend API\n * \n * @param specialtyId - The ID of the specialty to filter doctors by\n * @returns Promise<Doctor[]> - Array of doctors for the specified specialty\n * @throws ApiError - When the API request fails or returns an error\n * \n * OpenAPI Specification:\n * GET /api/v1/doctors?specialty_id={specialtyId}\n * \n * Success Response (200):\n * {\n *   \"message\": \"Doctors retrieved successfully\",\n *   \"data\": Doctor[]\n * }\n * \n * Error Response (404):\n * {\n *   \"error\": \"Not Found\",\n *   \"message\": \"No doctors found for the specified specialty\"\n * }\n */\nexport const getDoctorsBySpecialty = async specialtyId => {\n  try {\n    const response = await apiClient.get(`/doctors?specialty_id=${specialtyId}`);\n    return response;\n  } catch (error) {\n    var _error$response2;\n    if (error.status === 401) {\n      throw new Error('Authentication failed - please log in again');\n    }\n    if (error.status === 404) {\n      throw new Error('No doctors found for this specialty');\n    }\n    const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.message) || error.message || 'Failed to fetch doctors by specialty';\n    throw new Error(message);\n  }\n};\n\n/**\n * Creates a new doctor in the backend API\n * \n * @param data - The doctor data to create\n * @returns Promise<Doctor> - The created doctor object\n * @throws Error - When the API request fails or returns an error\n * \n * OpenAPI Specification:\n * POST /api/v1/doctors\n * \n * Request Body:\n * {\n *   \"name\": \"string\",\n *   \"specialty_id\": number,\n *   \"is_active\": boolean (optional, defaults to true)\n * }\n * \n * Success Response (201):\n * {\n *   \"message\": \"Doctor created successfully\",\n *   \"data\": Doctor\n * }\n * \n * Error Response (400):\n * {\n *   \"error\": \"Bad Request\",\n *   \"message\": \"Invalid doctor data\"\n * }\n */\nexport const createDoctor = async data => {\n  try {\n    const response = await apiClient.post('/doctors', data);\n    return response;\n  } catch (error) {\n    var _error$response3;\n    if (error.status === 401) {\n      throw new Error('Authentication failed - please log in again');\n    }\n    if (error.status === 400) {\n      throw new Error('Invalid doctor data - please check your input');\n    }\n    const message = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.message) || error.message || 'Failed to create doctor';\n    throw new Error(message);\n  }\n};\n\n/**\n * Fetches a single doctor by ID from the backend API\n * \n * @param id - The ID of the doctor to fetch\n * @returns Promise<Doctor> - The doctor object\n * @throws Error - When the API request fails or returns an error\n * \n * OpenAPI Specification:\n * GET /api/v1/doctors/:id\n * \n * Success Response (200):\n * {\n *   \"message\": \"Doctor retrieved successfully\",\n *   \"data\": Doctor\n * }\n * \n * Error Response (404):\n * {\n *   \"error\": \"Not Found\",\n *   \"message\": \"Doctor not found\"\n * }\n */\nexport const getDoctorById = async id => {\n  try {\n    const response = await apiClient.get(`/doctors/${id}`);\n    return response;\n  } catch (error) {\n    var _error$response4;\n    if (error.status === 401) {\n      throw new Error('Authentication failed - please log in again');\n    }\n    if (error.status === 404) {\n      throw new Error('Doctor not found');\n    }\n    const message = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.message) || error.message || 'Failed to fetch doctor';\n    throw new Error(message);\n  }\n};\n\n/**\n * Update a doctor's information\n * @param id - The doctor's ID\n * @param data - Partial doctor data to update\n * @returns Promise<Doctor> - The updated doctor object\n * @throws Error if update fails or unauthorized\n */\nexport const updateDoctor = async (id, data) => {\n  try {\n    const response = await apiClient.put(`/doctors/${id}`, data);\n    return response.data;\n  } catch (error) {\n    var _error$response5, _error$response6, _error$response7, _error$response8, _error$response0, _error$response0$data;\n    if (((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status) === 401) {\n      throw new Error('Authentication required. Please log in.');\n    }\n    if (((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.status) === 403) {\n      throw new Error('You do not have permission to update this doctor.');\n    }\n    if (((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.status) === 404) {\n      throw new Error('Doctor not found.');\n    }\n    if (((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.status) === 400) {\n      var _error$response9, _error$response9$data;\n      throw new Error(((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.message) || 'Invalid data provided.');\n    }\n    throw new Error(((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : (_error$response0$data = _error$response0.data) === null || _error$response0$data === void 0 ? void 0 : _error$response0$data.message) || 'Failed to update doctor');\n  }\n};\n\n/**\n * Alternative implementation using axios (commented out)\n * Uncomment and install axios if preferred: npm install axios\n */\n/*\nimport axios, { AxiosError } from 'axios';\n\nexport async function fetchDoctorsBySpecialtyAxios(specialtyId: number): Promise<Doctor[]> {\n  if (!specialtyId || specialtyId <= 0) {\n    throw new ApiError('Invalid specialty ID. Must be a positive number.', 400);\n  }\n\n  try {\n    const response = await axios.get<ApiResponse<Doctor[]>>(\n      `${API_BASE_URL}/doctors`,\n      {\n        params: { specialty_id: specialtyId },\n        headers: {\n          ...(getAuthToken() && { 'Authorization': `Bearer ${getAuthToken()}` })\n        }\n      }\n    );\n\n    return response.data.data;\n\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      const axiosError = error as AxiosError<ErrorResponse>;\n      \n      if (axiosError.response?.status === 404) {\n        throw new ApiError(\n          `No doctors found for specialty ID ${specialtyId}`,\n          404,\n          axiosError.response.data\n        );\n      }\n\n      throw new ApiError(\n        axiosError.response?.data?.message || axiosError.message,\n        axiosError.response?.status || 500,\n        axiosError.response?.data\n      );\n    }\n\n    throw new ApiError(\n      `Unexpected error: ${error instanceof Error ? error.message : 'Unknown error occurred'}`,\n      500\n    );\n  }\n}\n*/\n\n/**\n * Example usage:\n * \n * try {\n *   const doctors = await fetchDoctorsBySpecialty(5);\n *   console.log('Doctors found:', doctors);\n * } catch (error) {\n *   if (error instanceof ApiError) {\n *     if (error.status === 404) {\n *       console.log('No doctors found for this specialty');\n *     } else {\n *       console.error('API Error:', error.message);\n *     }\n *   }\n * }\n */","map":{"version":3,"names":["apiClient","getDoctors","response","get","error","_error$response","status","Error","message","getDoctorsBySpecialty","specialtyId","_error$response2","createDoctor","data","post","_error$response3","getDoctorById","id","_error$response4","updateDoctor","put","_error$response5","_error$response6","_error$response7","_error$response8","_error$response0","_error$response0$data","_error$response9","_error$response9$data"],"sources":["C:/Users/HP/Smart-Doctor-Booking-Reminder-App/frontend/src/services/doctorApi.ts"],"sourcesContent":["import { Doctor, DoctorData } from '../types/api';\nimport apiClient from '../utils/apiClient';\n\n/**\n * Fetches all doctors from the backend API\n * \n * @returns Promise<Doctor[]> - Array of all doctors\n * @throws Error - When the API request fails or returns an error\n */\nexport const getDoctors = async (): Promise<Doctor[]> => {\n  try {\n    const response = await apiClient.get<Doctor[]>('/doctors');\n    return response;\n  } catch (error: any) {\n    if (error.status === 401) {\n      throw new Error('Authentication failed - please log in again');\n    }\n    \n    const message = error.response?.message || error.message || 'Failed to fetch doctors';\n    throw new Error(message);\n  }\n};\n\n/**\n * Fetches doctors by specialty ID from the backend API\n * \n * @param specialtyId - The ID of the specialty to filter doctors by\n * @returns Promise<Doctor[]> - Array of doctors for the specified specialty\n * @throws ApiError - When the API request fails or returns an error\n * \n * OpenAPI Specification:\n * GET /api/v1/doctors?specialty_id={specialtyId}\n * \n * Success Response (200):\n * {\n *   \"message\": \"Doctors retrieved successfully\",\n *   \"data\": Doctor[]\n * }\n * \n * Error Response (404):\n * {\n *   \"error\": \"Not Found\",\n *   \"message\": \"No doctors found for the specified specialty\"\n * }\n */\nexport const getDoctorsBySpecialty = async (specialtyId: number): Promise<Doctor[]> => {\n  try {\n    const response = await apiClient.get<Doctor[]>(\n      `/doctors?specialty_id=${specialtyId}`\n    );\n    return response;\n  } catch (error: any) {\n    if (error.status === 401) {\n      throw new Error('Authentication failed - please log in again');\n    }\n    \n    if (error.status === 404) {\n      throw new Error('No doctors found for this specialty');\n    }\n    \n    const message = error.response?.message || error.message || 'Failed to fetch doctors by specialty';\n    throw new Error(message);\n  }\n};\n\n/**\n * Creates a new doctor in the backend API\n * \n * @param data - The doctor data to create\n * @returns Promise<Doctor> - The created doctor object\n * @throws Error - When the API request fails or returns an error\n * \n * OpenAPI Specification:\n * POST /api/v1/doctors\n * \n * Request Body:\n * {\n *   \"name\": \"string\",\n *   \"specialty_id\": number,\n *   \"is_active\": boolean (optional, defaults to true)\n * }\n * \n * Success Response (201):\n * {\n *   \"message\": \"Doctor created successfully\",\n *   \"data\": Doctor\n * }\n * \n * Error Response (400):\n * {\n *   \"error\": \"Bad Request\",\n *   \"message\": \"Invalid doctor data\"\n * }\n */\nexport const createDoctor = async (data: DoctorData): Promise<Doctor> => {\n  try {\n    const response = await apiClient.post<Doctor>('/doctors', data);\n    return response;\n  } catch (error: any) {\n    if (error.status === 401) {\n      throw new Error('Authentication failed - please log in again');\n    }\n    \n    if (error.status === 400) {\n      throw new Error('Invalid doctor data - please check your input');\n    }\n    \n    const message = error.response?.message || error.message || 'Failed to create doctor';\n    throw new Error(message);\n  }\n};\n\n/**\n * Fetches a single doctor by ID from the backend API\n * \n * @param id - The ID of the doctor to fetch\n * @returns Promise<Doctor> - The doctor object\n * @throws Error - When the API request fails or returns an error\n * \n * OpenAPI Specification:\n * GET /api/v1/doctors/:id\n * \n * Success Response (200):\n * {\n *   \"message\": \"Doctor retrieved successfully\",\n *   \"data\": Doctor\n * }\n * \n * Error Response (404):\n * {\n *   \"error\": \"Not Found\",\n *   \"message\": \"Doctor not found\"\n * }\n */\nexport const getDoctorById = async (id: number): Promise<Doctor> => {\n  try {\n    const response = await apiClient.get<Doctor>(`/doctors/${id}`);\n    return response;\n  } catch (error: any) {\n    if (error.status === 401) {\n      throw new Error('Authentication failed - please log in again');\n    }\n    \n    if (error.status === 404) {\n      throw new Error('Doctor not found');\n    }\n    \n    const message = error.response?.message || error.message || 'Failed to fetch doctor';\n    throw new Error(message);\n  }\n};\n\n/**\n * Update a doctor's information\n * @param id - The doctor's ID\n * @param data - Partial doctor data to update\n * @returns Promise<Doctor> - The updated doctor object\n * @throws Error if update fails or unauthorized\n */\nexport const updateDoctor = async (id: number, data: Partial<DoctorData>): Promise<Doctor> => {\n  try {\n    const response = await apiClient.put<Doctor>(`/doctors/${id}`, data);\n    return response.data;\n  } catch (error: any) {\n    if (error.response?.status === 401) {\n      throw new Error('Authentication required. Please log in.');\n    }\n    if (error.response?.status === 403) {\n      throw new Error('You do not have permission to update this doctor.');\n    }\n    if (error.response?.status === 404) {\n      throw new Error('Doctor not found.');\n    }\n    if (error.response?.status === 400) {\n      throw new Error(error.response?.data?.message || 'Invalid data provided.');\n    }\n    throw new Error(error.response?.data?.message || 'Failed to update doctor');\n  }\n};\n\n/**\n * Alternative implementation using axios (commented out)\n * Uncomment and install axios if preferred: npm install axios\n */\n/*\nimport axios, { AxiosError } from 'axios';\n\nexport async function fetchDoctorsBySpecialtyAxios(specialtyId: number): Promise<Doctor[]> {\n  if (!specialtyId || specialtyId <= 0) {\n    throw new ApiError('Invalid specialty ID. Must be a positive number.', 400);\n  }\n\n  try {\n    const response = await axios.get<ApiResponse<Doctor[]>>(\n      `${API_BASE_URL}/doctors`,\n      {\n        params: { specialty_id: specialtyId },\n        headers: {\n          ...(getAuthToken() && { 'Authorization': `Bearer ${getAuthToken()}` })\n        }\n      }\n    );\n\n    return response.data.data;\n\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      const axiosError = error as AxiosError<ErrorResponse>;\n      \n      if (axiosError.response?.status === 404) {\n        throw new ApiError(\n          `No doctors found for specialty ID ${specialtyId}`,\n          404,\n          axiosError.response.data\n        );\n      }\n\n      throw new ApiError(\n        axiosError.response?.data?.message || axiosError.message,\n        axiosError.response?.status || 500,\n        axiosError.response?.data\n      );\n    }\n\n    throw new ApiError(\n      `Unexpected error: ${error instanceof Error ? error.message : 'Unknown error occurred'}`,\n      500\n    );\n  }\n}\n*/\n\n\n\n/**\n * Example usage:\n * \n * try {\n *   const doctors = await fetchDoctorsBySpecialty(5);\n *   console.log('Doctors found:', doctors);\n * } catch (error) {\n *   if (error instanceof ApiError) {\n *     if (error.status === 404) {\n *       console.log('No doctors found for this specialty');\n *     } else {\n *       console.error('API Error:', error.message);\n *     }\n *   }\n * }\n */"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}