{"ast":null,"code":"import{useState,useEffect}from'react';import{ApiError}from'../api/types/api';import apiClient from'../api/clients/apiClient';/**\n * Custom hook for fetching and managing all doctors data\n * \n * @returns Object containing doctors array, loading state, error state, and refresh function\n */export const useDoctorList=()=>{const[doctors,setDoctors]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);/**\n   * Fetch all doctors from the API\n   */const fetchDoctors=async()=>{try{setLoading(true);setError(null);const response=await apiClient.get('/api/v1/doctors');setDoctors(response.data||[]);}catch(err){const errorMessage=err instanceof ApiError?err.message:'Failed to fetch doctors';setError(errorMessage);console.error('Error fetching doctors:',err);}finally{setLoading(false);}};/**\n   * Refresh the doctors list\n   */const refresh=()=>{fetchDoctors();};// Fetch doctors on component mount\nuseEffect(()=>{fetchDoctors();},[]);return{doctors,loading,error,refresh};};export default useDoctorList;","map":{"version":3,"names":["useState","useEffect","ApiError","apiClient","useDoctorList","doctors","setDoctors","loading","setLoading","error","setError","fetchDoctors","response","get","data","err","errorMessage","message","console","refresh"],"sources":["C:/Users/HP/Smart-Doctor-Booking-Reminder-App/frontend/src/hooks/useDoctorList.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Doctor, ApiError } from '../api/types/api';\nimport apiClient from '../api/clients/apiClient';\n\n/**\n * Custom hook for fetching and managing all doctors data\n * \n * @returns Object containing doctors array, loading state, error state, and refresh function\n */\nexport const useDoctorList = () => {\n  const [doctors, setDoctors] = useState<Doctor[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  /**\n   * Fetch all doctors from the API\n   */\n  const fetchDoctors = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await apiClient.get('/api/v1/doctors');\n      setDoctors(response.data || []);\n    } catch (err: any) {\n      const errorMessage = err instanceof ApiError \n        ? err.message \n        : 'Failed to fetch doctors';\n      setError(errorMessage);\n      console.error('Error fetching doctors:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Refresh the doctors list\n   */\n  const refresh = () => {\n    fetchDoctors();\n  };\n\n  // Fetch doctors on component mount\n  useEffect(() => {\n    fetchDoctors();\n  }, []);\n\n  return {\n    doctors,\n    loading,\n    error,\n    refresh\n  };\n};\n\nexport default useDoctorList;"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC3C,OAAiBC,QAAQ,KAAQ,kBAAkB,CACnD,MAAO,CAAAC,SAAS,KAAM,0BAA0B,CAEhD;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,aAAa,CAAGA,CAAA,GAAM,CACjC,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGN,QAAQ,CAAW,EAAE,CAAC,CACpD,KAAM,CAACO,OAAO,CAAEC,UAAU,CAAC,CAAGR,QAAQ,CAAU,IAAI,CAAC,CACrD,KAAM,CAACS,KAAK,CAAEC,QAAQ,CAAC,CAAGV,QAAQ,CAAgB,IAAI,CAAC,CAEvD;AACF;AACA,KACE,KAAM,CAAAW,YAAY,CAAG,KAAAA,CAAA,GAAY,CAC/B,GAAI,CACFH,UAAU,CAAC,IAAI,CAAC,CAChBE,QAAQ,CAAC,IAAI,CAAC,CAEd,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAT,SAAS,CAACU,GAAG,CAAC,iBAAiB,CAAC,CACvDP,UAAU,CAACM,QAAQ,CAACE,IAAI,EAAI,EAAE,CAAC,CACjC,CAAE,MAAOC,GAAQ,CAAE,CACjB,KAAM,CAAAC,YAAY,CAAGD,GAAG,WAAY,CAAAb,QAAQ,CACxCa,GAAG,CAACE,OAAO,CACX,yBAAyB,CAC7BP,QAAQ,CAACM,YAAY,CAAC,CACtBE,OAAO,CAACT,KAAK,CAAC,yBAAyB,CAAEM,GAAG,CAAC,CAC/C,CAAC,OAAS,CACRP,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAED;AACF;AACA,KACE,KAAM,CAAAW,OAAO,CAAGA,CAAA,GAAM,CACpBR,YAAY,CAAC,CAAC,CAChB,CAAC,CAED;AACAV,SAAS,CAAC,IAAM,CACdU,YAAY,CAAC,CAAC,CAChB,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CACLN,OAAO,CACPE,OAAO,CACPE,KAAK,CACLU,OACF,CAAC,CACH,CAAC,CAED,cAAe,CAAAf,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}