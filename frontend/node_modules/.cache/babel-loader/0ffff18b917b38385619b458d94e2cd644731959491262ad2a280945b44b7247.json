{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';import{ApiError}from'../api/types/api';import{getDoctorsBySpecialty}from'../api/clients/doctorApi';/**\n * Custom hook for managing doctors data with loading and error states\n */export function useDoctors(){const[doctors,setDoctors]=useState([]);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const fetchDoctors=useCallback(async specialtyId=>{setLoading(true);setError(null);try{const doctorsData=await getDoctorsBySpecialty(specialtyId);setDoctors(doctorsData);}catch(err){if(err instanceof ApiError){// Handle specific API errors\nswitch(err.status){case 404:setError(\"No doctors found for the selected specialty.\");setDoctors([]);// Clear previous results\nbreak;case 401:setError('Authentication required. Please log in.');break;case 403:setError('Access denied. You do not have permission to view this data.');break;case 500:setError('Server error. Please try again later.');break;case 0:setError('Network error. Please check your internet connection.');break;default:setError(err.message||'An unexpected error occurred.');}}else{setError('An unexpected error occurred. Please try again.');}console.error('Error fetching doctors:',err);}finally{setLoading(false);}},[]);const clearError=useCallback(()=>{setError(null);},[]);return{doctors,loading,error,fetchDoctors,clearError};}/**\n * Hook for fetching doctors by specialty with automatic loading on mount\n */export function useDoctorsBySpecialty(specialtyId){const doctorsState=useDoctors();const{fetchDoctors}=doctorsState;useEffect(()=>{if(specialtyId&&specialtyId>0){fetchDoctors(specialtyId);}},[specialtyId,fetchDoctors]);return doctorsState;}","map":{"version":3,"names":["useState","useEffect","useCallback","ApiError","getDoctorsBySpecialty","useDoctors","doctors","setDoctors","loading","setLoading","error","setError","fetchDoctors","specialtyId","doctorsData","err","status","message","console","clearError","useDoctorsBySpecialty","doctorsState"],"sources":["C:/Users/HP/Smart-Doctor-Booking-Reminder-App/frontend/src/hooks/useDoctors.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { Doctor, ApiError } from '../api/types/api';\nimport { getDoctorsBySpecialty } from '../api/clients/doctorApi';\n\n/**\n * Custom hook for managing doctors data with loading and error states\n */\nexport interface UseDoctorsState {\n  doctors: Doctor[];\n  loading: boolean;\n  error: string | null;\n  fetchDoctors: (specialtyId: number) => Promise<void>;\n  clearError: () => void;\n}\n\nexport function useDoctors(): UseDoctorsState {\n  const [doctors, setDoctors] = useState<Doctor[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchDoctors = useCallback(async (specialtyId: number) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const doctorsData = await getDoctorsBySpecialty(specialtyId);\n      setDoctors(doctorsData);\n    } catch (err) {\n      if (err instanceof ApiError) {\n        // Handle specific API errors\n        switch (err.status) {\n          case 404:\n            setError(`No doctors found for the selected specialty.`);\n            setDoctors([]); // Clear previous results\n            break;\n          case 401:\n            setError('Authentication required. Please log in.');\n            break;\n          case 403:\n            setError('Access denied. You do not have permission to view this data.');\n            break;\n          case 500:\n            setError('Server error. Please try again later.');\n            break;\n          case 0:\n            setError('Network error. Please check your internet connection.');\n            break;\n          default:\n            setError(err.message || 'An unexpected error occurred.');\n        }\n      } else {\n        setError('An unexpected error occurred. Please try again.');\n      }\n      console.error('Error fetching doctors:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  return {\n    doctors,\n    loading,\n    error,\n    fetchDoctors,\n    clearError\n  };\n}\n\n/**\n * Hook for fetching doctors by specialty with automatic loading on mount\n */\nexport function useDoctorsBySpecialty(specialtyId: number | null): UseDoctorsState {\n  const doctorsState = useDoctors();\n  const { fetchDoctors } = doctorsState;\n\n  useEffect(() => {\n    if (specialtyId && specialtyId > 0) {\n      fetchDoctors(specialtyId);\n    }\n  }, [specialtyId, fetchDoctors]);\n\n  return doctorsState;\n}"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,CAAEC,WAAW,KAAQ,OAAO,CACxD,OAAiBC,QAAQ,KAAQ,kBAAkB,CACnD,OAASC,qBAAqB,KAAQ,0BAA0B,CAEhE;AACA;AACA,GASA,MAAO,SAAS,CAAAC,UAAUA,CAAA,CAAoB,CAC5C,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGP,QAAQ,CAAW,EAAE,CAAC,CACpD,KAAM,CAACQ,OAAO,CAAEC,UAAU,CAAC,CAAGT,QAAQ,CAAU,KAAK,CAAC,CACtD,KAAM,CAACU,KAAK,CAAEC,QAAQ,CAAC,CAAGX,QAAQ,CAAgB,IAAI,CAAC,CAEvD,KAAM,CAAAY,YAAY,CAAGV,WAAW,CAAC,KAAO,CAAAW,WAAmB,EAAK,CAC9DJ,UAAU,CAAC,IAAI,CAAC,CAChBE,QAAQ,CAAC,IAAI,CAAC,CAEd,GAAI,CACF,KAAM,CAAAG,WAAW,CAAG,KAAM,CAAAV,qBAAqB,CAACS,WAAW,CAAC,CAC5DN,UAAU,CAACO,WAAW,CAAC,CACzB,CAAE,MAAOC,GAAG,CAAE,CACZ,GAAIA,GAAG,WAAY,CAAAZ,QAAQ,CAAE,CAC3B;AACA,OAAQY,GAAG,CAACC,MAAM,EAChB,IAAK,IAAG,CACNL,QAAQ,+CAA+C,CAAC,CACxDJ,UAAU,CAAC,EAAE,CAAC,CAAE;AAChB,MACF,IAAK,IAAG,CACNI,QAAQ,CAAC,yCAAyC,CAAC,CACnD,MACF,IAAK,IAAG,CACNA,QAAQ,CAAC,8DAA8D,CAAC,CACxE,MACF,IAAK,IAAG,CACNA,QAAQ,CAAC,uCAAuC,CAAC,CACjD,MACF,IAAK,EAAC,CACJA,QAAQ,CAAC,uDAAuD,CAAC,CACjE,MACF,QACEA,QAAQ,CAACI,GAAG,CAACE,OAAO,EAAI,+BAA+B,CAAC,CAC5D,CACF,CAAC,IAAM,CACLN,QAAQ,CAAC,iDAAiD,CAAC,CAC7D,CACAO,OAAO,CAACR,KAAK,CAAC,yBAAyB,CAAEK,GAAG,CAAC,CAC/C,CAAC,OAAS,CACRN,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAU,UAAU,CAAGjB,WAAW,CAAC,IAAM,CACnCS,QAAQ,CAAC,IAAI,CAAC,CAChB,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CACLL,OAAO,CACPE,OAAO,CACPE,KAAK,CACLE,YAAY,CACZO,UACF,CAAC,CACH,CAEA;AACA;AACA,GACA,MAAO,SAAS,CAAAC,qBAAqBA,CAACP,WAA0B,CAAmB,CACjF,KAAM,CAAAQ,YAAY,CAAGhB,UAAU,CAAC,CAAC,CACjC,KAAM,CAAEO,YAAa,CAAC,CAAGS,YAAY,CAErCpB,SAAS,CAAC,IAAM,CACd,GAAIY,WAAW,EAAIA,WAAW,CAAG,CAAC,CAAE,CAClCD,YAAY,CAACC,WAAW,CAAC,CAC3B,CACF,CAAC,CAAE,CAACA,WAAW,CAAED,YAAY,CAAC,CAAC,CAE/B,MAAO,CAAAS,YAAY,CACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}