{"ast":null,"code":"import apiClient from'../clients/apiClient';/**\n * Health check response interface\n *//**\n * Health check result with additional metadata\n *//**\n * Utility function to check the health of the backend API\n * Calls GET /health endpoint and returns health status information\n * \n * @returns Promise<HealthCheckResult> - Health check result with status and metadata\n * \n * @example\n * ```typescript\n * const healthResult = await checkHealth();\n * if (healthResult.isHealthy) {\n *   console.log('API is healthy:', healthResult.response);\n * } else {\n *   console.error('API health check failed:', healthResult.error);\n * }\n * ```\n */export const checkHealth=async()=>{const startTime=Date.now();const timestamp=new Date();try{const response=await apiClient.get('/health');const responseTime=Date.now()-startTime;return{isHealthy:response.status==='healthy',response,responseTime,timestamp};}catch(error){const responseTime=Date.now()-startTime;// Extract meaningful error message\nlet errorMessage='Health check failed';if(error.response){// Server responded with error status\nerrorMessage=\"API returned \".concat(error.response.status,\": \").concat(error.response.statusText);}else if(error.request){// Request was made but no response received\nerrorMessage='No response from API server';}else{// Something else happened\nerrorMessage=error.message||'Unknown error occurred';}return{isHealthy:false,error:errorMessage,responseTime,timestamp};}};/**\n * Utility function to perform periodic health checks\n * Useful for continuous monitoring in development or debugging panels\n * \n * @param intervalMs - Interval in milliseconds between health checks (default: 30000ms = 30s)\n * @param onHealthChange - Callback function called when health status changes\n * @returns Function to stop the periodic health checks\n * \n * @example\n * ```typescript\n * const stopHealthCheck = startPeriodicHealthCheck(10000, (result) => {\n *   console.log('Health status:', result.isHealthy ? 'Healthy' : 'Unhealthy');\n * });\n * \n * // Stop monitoring after some time\n * setTimeout(() => stopHealthCheck(), 60000);\n * ```\n */export const startPeriodicHealthCheck=function(){let intervalMs=arguments.length>0&&arguments[0]!==undefined?arguments[0]:30000;let onHealthChange=arguments.length>1?arguments[1]:undefined;let lastHealthStatus=null;const performCheck=async()=>{try{const result=await checkHealth();// Call callback if health status changed or if it's the first check\nif(onHealthChange&&(lastHealthStatus===null||lastHealthStatus!==result.isHealthy)){onHealthChange(result);}lastHealthStatus=result.isHealthy;}catch(error){console.error('Periodic health check error:',error);}};// Perform initial check\nperformCheck();// Set up interval\nconst intervalId=setInterval(performCheck,intervalMs);// Return cleanup function\nreturn()=>{clearInterval(intervalId);};};/**\n * Format health check result for display purposes\n * Useful for debugging panels or status displays\n * \n * @param result - Health check result to format\n * @returns Formatted string representation of the health status\n */export const formatHealthStatus=result=>{const status=result.isHealthy?'✅ Healthy':'❌ Unhealthy';const responseTime=\"\".concat(result.responseTime,\"ms\");const timestamp=result.timestamp.toLocaleTimeString();if(result.isHealthy&&result.response){const uptime=result.response.uptime?\" | Uptime: \".concat(Math.floor(result.response.uptime/3600),\"h\"):'';const version=result.response.version?\" | v\".concat(result.response.version):'';return\"\".concat(status,\" | Response: \").concat(responseTime,\" | \").concat(timestamp).concat(uptime).concat(version);}else{return\"\".concat(status,\" | Response: \").concat(responseTime,\" | \").concat(timestamp,\" | Error: \").concat(result.error);}};","map":{"version":3,"names":["apiClient","checkHealth","startTime","Date","now","timestamp","response","get","responseTime","isHealthy","status","error","errorMessage","concat","statusText","request","message","startPeriodicHealthCheck","intervalMs","arguments","length","undefined","onHealthChange","lastHealthStatus","performCheck","result","console","intervalId","setInterval","clearInterval","formatHealthStatus","toLocaleTimeString","uptime","Math","floor","version"],"sources":["C:/Users/HP/Smart-Doctor-Booking-Reminder-App/frontend/src/api/health/healthCheck.ts"],"sourcesContent":["import apiClient from '../clients/apiClient';\n\n/**\n * Health check response interface\n */\nexport interface HealthCheckResponse {\n  status: 'healthy' | 'unhealthy';\n  timestamp: string;\n  uptime?: number;\n  version?: string;\n  database?: {\n    status: 'connected' | 'disconnected';\n    responseTime?: number;\n  };\n  services?: {\n    [key: string]: 'up' | 'down';\n  };\n}\n\n/**\n * Health check result with additional metadata\n */\nexport interface HealthCheckResult {\n  isHealthy: boolean;\n  response?: HealthCheckResponse;\n  error?: string;\n  responseTime: number;\n  timestamp: Date;\n}\n\n/**\n * Utility function to check the health of the backend API\n * Calls GET /health endpoint and returns health status information\n * \n * @returns Promise<HealthCheckResult> - Health check result with status and metadata\n * \n * @example\n * ```typescript\n * const healthResult = await checkHealth();\n * if (healthResult.isHealthy) {\n *   console.log('API is healthy:', healthResult.response);\n * } else {\n *   console.error('API health check failed:', healthResult.error);\n * }\n * ```\n */\nexport const checkHealth = async (): Promise<HealthCheckResult> => {\n  const startTime = Date.now();\n  const timestamp = new Date();\n\n  try {\n    const response = await apiClient.get<HealthCheckResponse>('/health');\n    const responseTime = Date.now() - startTime;\n\n    return {\n      isHealthy: response.status === 'healthy',\n      response,\n      responseTime,\n      timestamp\n    };\n  } catch (error: any) {\n    const responseTime = Date.now() - startTime;\n    \n    // Extract meaningful error message\n    let errorMessage = 'Health check failed';\n    \n    if (error.response) {\n      // Server responded with error status\n      errorMessage = `API returned ${error.response.status}: ${error.response.statusText}`;\n    } else if (error.request) {\n      // Request was made but no response received\n      errorMessage = 'No response from API server';\n    } else {\n      // Something else happened\n      errorMessage = error.message || 'Unknown error occurred';\n    }\n\n    return {\n      isHealthy: false,\n      error: errorMessage,\n      responseTime,\n      timestamp\n    };\n  }\n};\n\n/**\n * Utility function to perform periodic health checks\n * Useful for continuous monitoring in development or debugging panels\n * \n * @param intervalMs - Interval in milliseconds between health checks (default: 30000ms = 30s)\n * @param onHealthChange - Callback function called when health status changes\n * @returns Function to stop the periodic health checks\n * \n * @example\n * ```typescript\n * const stopHealthCheck = startPeriodicHealthCheck(10000, (result) => {\n *   console.log('Health status:', result.isHealthy ? 'Healthy' : 'Unhealthy');\n * });\n * \n * // Stop monitoring after some time\n * setTimeout(() => stopHealthCheck(), 60000);\n * ```\n */\nexport const startPeriodicHealthCheck = (\n  intervalMs: number = 30000,\n  onHealthChange?: (result: HealthCheckResult) => void\n): (() => void) => {\n  let lastHealthStatus: boolean | null = null;\n  \n  const performCheck = async () => {\n    try {\n      const result = await checkHealth();\n      \n      // Call callback if health status changed or if it's the first check\n      if (onHealthChange && (lastHealthStatus === null || lastHealthStatus !== result.isHealthy)) {\n        onHealthChange(result);\n      }\n      \n      lastHealthStatus = result.isHealthy;\n    } catch (error) {\n      console.error('Periodic health check error:', error);\n    }\n  };\n\n  // Perform initial check\n  performCheck();\n  \n  // Set up interval\n  const intervalId = setInterval(performCheck, intervalMs);\n  \n  // Return cleanup function\n  return () => {\n    clearInterval(intervalId);\n  };\n};\n\n/**\n * Format health check result for display purposes\n * Useful for debugging panels or status displays\n * \n * @param result - Health check result to format\n * @returns Formatted string representation of the health status\n */\nexport const formatHealthStatus = (result: HealthCheckResult): string => {\n  const status = result.isHealthy ? '✅ Healthy' : '❌ Unhealthy';\n  const responseTime = `${result.responseTime}ms`;\n  const timestamp = result.timestamp.toLocaleTimeString();\n  \n  if (result.isHealthy && result.response) {\n    const uptime = result.response.uptime ? ` | Uptime: ${Math.floor(result.response.uptime / 3600)}h` : '';\n    const version = result.response.version ? ` | v${result.response.version}` : '';\n    return `${status} | Response: ${responseTime} | ${timestamp}${uptime}${version}`;\n  } else {\n    return `${status} | Response: ${responseTime} | ${timestamp} | Error: ${result.error}`;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}