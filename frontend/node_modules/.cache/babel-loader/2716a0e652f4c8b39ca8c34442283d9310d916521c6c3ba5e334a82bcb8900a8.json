{"ast":null,"code":"// Authentication API client functions\n\nimport { storeToken, storeUser, getAuthHeader } from '../utils/tokenStorage';\nimport apiClient from '../utils/apiClient';\n\n// Base API URL - should match your backend server\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\nconst AUTH_ENDPOINT = `/api/v1/auth`;\n\n/**\n * Login function that calls POST /api/v1/auth/login\n * On success, stores the JWT token securely and returns user data\n * @param credentials - User login credentials\n * @returns Promise with user data\n * @throws Error with authentication failure details\n */\nexport const login = async credentials => {\n  try {\n    // Validate input\n    if (!credentials.username || !credentials.password) {\n      throw new Error('Username and password are required');\n    }\n\n    // Make API request to backend\n    const response = await apiClient.post(`${AUTH_ENDPOINT}/login`, {\n      username: credentials.username.trim(),\n      password: credentials.password\n    });\n    const loginData = response;\n\n    // Validate response structure\n    if (!loginData.token || !loginData.username) {\n      throw new Error('Invalid response from server');\n    }\n\n    // Store token securely in sessionStorage\n    storeToken(loginData.token);\n\n    // Store user information\n    const userData = {\n      user_id: loginData.user_id,\n      username: loginData.username,\n      role: loginData.role\n    };\n    storeUser(userData);\n    return loginData;\n  } catch (error) {\n    // Handle different types of errors\n    if (error.status) {\n      var _error$response;\n      // Server responded with error status\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.message) || error.message || 'Authentication failed';\n      throw new Error(errorMessage);\n    } else {\n      // Network error\n      throw new Error('Unable to connect to server. Please check your internet connection.');\n    }\n  }\n};\n\n/**\n * Validate the current JWT token with the backend\n * @returns Promise with validation result\n */\nexport const validateToken = async () => {\n  try {\n    const authHeader = getAuthHeader();\n    if (!authHeader) {\n      throw new Error('No authentication token found');\n    }\n    const response = await axios.get(`${AUTH_ENDPOINT}/validate`, {\n      headers: {\n        'Authorization': authHeader,\n        'Content-Type': 'application/json'\n      },\n      timeout: 5000\n    });\n    return response.data;\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      var _error$response2;\n      if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401) {\n        throw new Error('Token has expired or is invalid');\n      }\n      if (error.response) {\n        const errorData = error.response.data;\n        throw new Error(errorData.message || 'Token validation failed');\n      }\n      if (error.request) {\n        throw new Error('Unable to validate token. Please check your connection.');\n      }\n    }\n    throw error;\n  }\n};\n\n/**\n * Logout function that calls the backend logout endpoint\n * @returns Promise that resolves when logout is complete\n */\nexport const logout = async () => {\n  try {\n    const authHeader = getAuthHeader();\n    if (authHeader) {\n      // Call backend logout endpoint\n      await axios.post(`${AUTH_ENDPOINT}/logout`, {}, {\n        headers: {\n          'Authorization': authHeader,\n          'Content-Type': 'application/json'\n        },\n        timeout: 5000\n      });\n    }\n  } catch (error) {\n    // Log error but don't throw - logout should always succeed locally\n    console.warn('Backend logout failed:', error);\n  }\n};\n\n/**\n * Comprehensive logout function that handles both backend logout and local cleanup\n * This function calls POST /api/v1/auth/logout, clears stored JWT tokens, and can be used\n * independently or with AuthContext integration\n * \n * @returns Promise that resolves when logout process is complete\n * @throws Error only for critical failures that prevent local cleanup\n * \n * Usage:\n * ```typescript\n * // Standalone usage\n * await logoutUser();\n * \n * // With AuthContext (recommended)\n * const { logout } = useAuth();\n * await logout(); // This internally calls logoutUser\n * ```\n */\nexport const logoutUser = async () => {\n  try {\n    // Step 1: Call backend logout endpoint to invalidate token server-side\n    await logout();\n  } catch (error) {\n    // Backend logout failed, but we should still clear local data\n    console.warn('Backend logout failed, proceeding with local cleanup:', error);\n  }\n\n  // Step 2: Always clear local storage/session data regardless of backend response\n  // Import clearAuthData here to avoid circular dependencies\n  const {\n    clearAuthData\n  } = await import('../utils/tokenStorage');\n  clearAuthData();\n\n  // Note: If using with AuthContext, the context's logout function will also\n  // dispatch the LOGOUT action to update the global state\n};\n\n/**\n * Create an axios instance with authentication headers for API calls\n * @returns Configured axios instance\n */\nexport const createAuthenticatedAxios = () => {\n  const instance = axios.create({\n    baseURL: API_BASE_URL,\n    timeout: 10000\n  });\n\n  // Add request interceptor to include auth header\n  instance.interceptors.request.use(config => {\n    const authHeader = getAuthHeader();\n    if (authHeader) {\n      config.headers.Authorization = authHeader;\n    }\n    return config;\n  }, error => {\n    return Promise.reject(error);\n  });\n\n  // Add response interceptor to handle auth errors\n  instance.interceptors.response.use(response => response, error => {\n    var _error$response3;\n    if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 401) {\n      // Token expired or invalid - could trigger logout here\n      console.warn('Authentication failed - token may be expired');\n    }\n    return Promise.reject(error);\n  });\n  return instance;\n};","map":{"version":3,"names":["storeToken","storeUser","getAuthHeader","apiClient","API_BASE_URL","process","env","REACT_APP_API_URL","AUTH_ENDPOINT","login","credentials","username","password","Error","response","post","trim","loginData","token","userData","user_id","role","error","status","_error$response","errorMessage","message","validateToken","authHeader","axios","get","headers","timeout","data","isAxiosError","_error$response2","errorData","request","logout","console","warn","logoutUser","clearAuthData","createAuthenticatedAxios","instance","create","baseURL","interceptors","use","config","Authorization","Promise","reject","_error$response3"],"sources":["C:/Users/HP/Smart-Doctor-Booking-Reminder-App/frontend/src/services/authApi.ts"],"sourcesContent":["// Authentication API client functions\n\nimport { LoginData, LoginResponse, AuthApiError, TokenValidationResponse } from '../types/auth';\nimport { storeToken, storeUser, getAuthHeader } from '../utils/tokenStorage';\nimport apiClient from '../utils/apiClient';\n\n// Base API URL - should match your backend server\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\nconst AUTH_ENDPOINT = `/api/v1/auth`;\n\n/**\n * Login function that calls POST /api/v1/auth/login\n * On success, stores the JWT token securely and returns user data\n * @param credentials - User login credentials\n * @returns Promise with user data\n * @throws Error with authentication failure details\n */\nexport const login = async (credentials: LoginData): Promise<LoginResponse> => {\n  try {\n    // Validate input\n    if (!credentials.username || !credentials.password) {\n      throw new Error('Username and password are required');\n    }\n\n    // Make API request to backend\n    const response = await apiClient.post<LoginResponse>(\n      `${AUTH_ENDPOINT}/login`,\n      {\n        username: credentials.username.trim(),\n        password: credentials.password\n      }\n    );\n\n    const loginData = response;\n\n    // Validate response structure\n    if (!loginData.token || !loginData.username) {\n      throw new Error('Invalid response from server');\n    }\n\n    // Store token securely in sessionStorage\n    storeToken(loginData.token);\n\n    // Store user information\n    const userData = {\n      user_id: loginData.user_id,\n      username: loginData.username,\n      role: loginData.role\n    };\n    storeUser(userData);\n\n    return loginData;\n\n  } catch (error: any) {\n    // Handle different types of errors\n    if (error.status) {\n      // Server responded with error status\n      const errorMessage = error.response?.message || error.message || 'Authentication failed';\n      throw new Error(errorMessage);\n    } else {\n      // Network error\n      throw new Error('Unable to connect to server. Please check your internet connection.');\n    }\n  }\n};\n\n/**\n * Validate the current JWT token with the backend\n * @returns Promise with validation result\n */\nexport const validateToken = async (): Promise<TokenValidationResponse> => {\n  try {\n    const authHeader = getAuthHeader();\n    \n    if (!authHeader) {\n      throw new Error('No authentication token found');\n    }\n\n    const response: AxiosResponse<TokenValidationResponse> = await axios.get(\n      `${AUTH_ENDPOINT}/validate`,\n      {\n        headers: {\n          'Authorization': authHeader,\n          'Content-Type': 'application/json',\n        },\n        timeout: 5000,\n      }\n    );\n\n    return response.data;\n\n  } catch (error: any) {\n    if (axios.isAxiosError(error)) {\n      if (error.response?.status === 401) {\n        throw new Error('Token has expired or is invalid');\n      }\n      if (error.response) {\n        const errorData = error.response.data as AuthApiError;\n        throw new Error(errorData.message || 'Token validation failed');\n      }\n      if (error.request) {\n        throw new Error('Unable to validate token. Please check your connection.');\n      }\n    }\n    \n    throw error;\n  }\n};\n\n/**\n * Logout function that calls the backend logout endpoint\n * @returns Promise that resolves when logout is complete\n */\nexport const logout = async (): Promise<void> => {\n  try {\n    const authHeader = getAuthHeader();\n    \n    if (authHeader) {\n      // Call backend logout endpoint\n      await axios.post(\n        `${AUTH_ENDPOINT}/logout`,\n        {},\n        {\n          headers: {\n            'Authorization': authHeader,\n            'Content-Type': 'application/json',\n          },\n          timeout: 5000,\n        }\n      );\n    }\n  } catch (error) {\n    // Log error but don't throw - logout should always succeed locally\n    console.warn('Backend logout failed:', error);\n  }\n};\n\n/**\n * Comprehensive logout function that handles both backend logout and local cleanup\n * This function calls POST /api/v1/auth/logout, clears stored JWT tokens, and can be used\n * independently or with AuthContext integration\n * \n * @returns Promise that resolves when logout process is complete\n * @throws Error only for critical failures that prevent local cleanup\n * \n * Usage:\n * ```typescript\n * // Standalone usage\n * await logoutUser();\n * \n * // With AuthContext (recommended)\n * const { logout } = useAuth();\n * await logout(); // This internally calls logoutUser\n * ```\n */\nexport const logoutUser = async (): Promise<void> => {\n  try {\n    // Step 1: Call backend logout endpoint to invalidate token server-side\n    await logout();\n  } catch (error) {\n    // Backend logout failed, but we should still clear local data\n    console.warn('Backend logout failed, proceeding with local cleanup:', error);\n  }\n  \n  // Step 2: Always clear local storage/session data regardless of backend response\n  // Import clearAuthData here to avoid circular dependencies\n  const { clearAuthData } = await import('../utils/tokenStorage');\n  clearAuthData();\n  \n  // Note: If using with AuthContext, the context's logout function will also\n  // dispatch the LOGOUT action to update the global state\n};\n\n/**\n * Create an axios instance with authentication headers for API calls\n * @returns Configured axios instance\n */\nexport const createAuthenticatedAxios = () => {\n  const instance = axios.create({\n    baseURL: API_BASE_URL,\n    timeout: 10000,\n  });\n\n  // Add request interceptor to include auth header\n  instance.interceptors.request.use(\n    (config) => {\n      const authHeader = getAuthHeader();\n      if (authHeader) {\n        config.headers.Authorization = authHeader;\n      }\n      return config;\n    },\n    (error) => {\n      return Promise.reject(error);\n    }\n  );\n\n  // Add response interceptor to handle auth errors\n  instance.interceptors.response.use(\n    (response) => response,\n    (error) => {\n      if (error.response?.status === 401) {\n        // Token expired or invalid - could trigger logout here\n        console.warn('Authentication failed - token may be expired');\n      }\n      return Promise.reject(error);\n    }\n  );\n\n  return instance;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}