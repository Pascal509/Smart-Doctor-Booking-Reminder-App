{"ast":null,"code":"// Authentication API client functions\n\nimport { storeToken, storeUser, getAuthHeader } from '../utils/tokenStorage';\nimport apiClient from '../utils/apiClient';\n\n// Base API URL - should match your backend server\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\nconst AUTH_ENDPOINT = `/api/v1/auth`;\n\n/**\n * Login function that calls POST /api/v1/auth/login\n * On success, stores the JWT token securely and returns user data\n * @param credentials - User login credentials\n * @returns Promise with user data\n * @throws Error with authentication failure details\n */\nexport const login = async credentials => {\n  try {\n    // Validate input\n    if (!credentials.username || !credentials.password) {\n      throw new Error('Username and password are required');\n    }\n\n    // Make API request to backend\n    const response = await apiClient.post(`${AUTH_ENDPOINT}/login`, {\n      username: credentials.username.trim(),\n      password: credentials.password\n    });\n    const loginData = response;\n\n    // Validate response structure\n    if (!loginData.token || !loginData.username) {\n      throw new Error('Invalid response from server');\n    }\n\n    // Store token securely in sessionStorage\n    storeToken(loginData.token);\n\n    // Store user information\n    const userData = {\n      user_id: loginData.user_id,\n      username: loginData.username,\n      role: loginData.role\n    };\n    storeUser(userData);\n    return loginData;\n  } catch (error) {\n    // Handle different types of errors\n    if (error.status) {\n      var _error$response;\n      // Server responded with error status\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.message) || error.message || 'Authentication failed';\n      throw new Error(errorMessage);\n    } else {\n      // Network error\n      throw new Error('Unable to connect to server. Please check your internet connection.');\n    }\n  }\n};\n\n/**\n * Validate the current JWT token with the backend\n * @returns Promise with validation result\n */\nexport const validateToken = async () => {\n  try {\n    const authHeader = getAuthHeader();\n    if (!authHeader) {\n      throw new Error('No authentication token found');\n    }\n    const response = await apiClient.get(`${AUTH_ENDPOINT}/validate`);\n    return response;\n  } catch (error) {\n    if (error.status) {\n      var _error$response2;\n      const status = error.status;\n      const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.message) || error.message || 'Token validation failed';\n      throw new Error(message);\n    } else {\n      throw new Error('Network error during token validation');\n    }\n  }\n};\n\n/**\n * Logout function that calls the backend logout endpoint\n * @returns Promise that resolves when logout is complete\n */\nexport const logout = async () => {\n  try {\n    const token = getToken();\n    if (token) {\n      // Call backend logout endpoint\n      await apiClient.post(`${AUTH_ENDPOINT}/logout`, {});\n    }\n  } catch (error) {\n    // Log error but don't throw - logout should always succeed locally\n    console.warn('Backend logout failed:', error);\n  }\n};\n\n/**\n * Comprehensive logout function that handles both backend logout and local cleanup\n * This function calls POST /api/v1/auth/logout, clears stored JWT tokens, and can be used\n * independently or with AuthContext integration\n * \n * @returns Promise that resolves when logout process is complete\n * @throws Error only for critical failures that prevent local cleanup\n * \n * Usage:\n * ```typescript\n * // Standalone usage\n * await logoutUser();\n * \n * // With AuthContext (recommended)\n * const { logout } = useAuth();\n * await logout(); // This internally calls logoutUser\n * ```\n */\nexport const logoutUser = async () => {\n  try {\n    // Step 1: Call backend logout endpoint to invalidate token server-side\n    await logout();\n  } catch (error) {\n    // Backend logout failed, but we should still clear local data\n    console.warn('Backend logout failed, proceeding with local cleanup:', error);\n  }\n\n  // Step 2: Always clear local storage/session data regardless of backend response\n  // Import clearAuthData here to avoid circular dependencies\n  const {\n    clearAuthData\n  } = await import('../utils/tokenStorage');\n  clearAuthData();\n\n  // Note: If using with AuthContext, the context's logout function will also\n  // dispatch the LOGOUT action to update the global state\n};\n\n// Note: The createAuthenticatedAxios function has been replaced by the new\n// secure API client utility (apiClient) which automatically handles\n// JWT token injection and authentication errors.","map":{"version":3,"names":["storeToken","storeUser","getAuthHeader","apiClient","API_BASE_URL","process","env","REACT_APP_API_URL","AUTH_ENDPOINT","login","credentials","username","password","Error","response","post","trim","loginData","token","userData","user_id","role","error","status","_error$response","errorMessage","message","validateToken","authHeader","get","_error$response2","logout","getToken","console","warn","logoutUser","clearAuthData"],"sources":["C:/Users/HP/Smart-Doctor-Booking-Reminder-App/frontend/src/services/authApi.ts"],"sourcesContent":["// Authentication API client functions\n\nimport { LoginData, LoginResponse, AuthApiError, TokenValidationResponse } from '../types/auth';\nimport { storeToken, storeUser, getAuthHeader } from '../utils/tokenStorage';\nimport apiClient from '../utils/apiClient';\n\n// Base API URL - should match your backend server\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\nconst AUTH_ENDPOINT = `/api/v1/auth`;\n\n/**\n * Login function that calls POST /api/v1/auth/login\n * On success, stores the JWT token securely and returns user data\n * @param credentials - User login credentials\n * @returns Promise with user data\n * @throws Error with authentication failure details\n */\nexport const login = async (credentials: LoginData): Promise<LoginResponse> => {\n  try {\n    // Validate input\n    if (!credentials.username || !credentials.password) {\n      throw new Error('Username and password are required');\n    }\n\n    // Make API request to backend\n    const response = await apiClient.post<LoginResponse>(\n      `${AUTH_ENDPOINT}/login`,\n      {\n        username: credentials.username.trim(),\n        password: credentials.password\n      }\n    );\n\n    const loginData = response;\n\n    // Validate response structure\n    if (!loginData.token || !loginData.username) {\n      throw new Error('Invalid response from server');\n    }\n\n    // Store token securely in sessionStorage\n    storeToken(loginData.token);\n\n    // Store user information\n    const userData = {\n      user_id: loginData.user_id,\n      username: loginData.username,\n      role: loginData.role\n    };\n    storeUser(userData);\n\n    return loginData;\n\n  } catch (error: any) {\n    // Handle different types of errors\n    if (error.status) {\n      // Server responded with error status\n      const errorMessage = error.response?.message || error.message || 'Authentication failed';\n      throw new Error(errorMessage);\n    } else {\n      // Network error\n      throw new Error('Unable to connect to server. Please check your internet connection.');\n    }\n  }\n};\n\n/**\n * Validate the current JWT token with the backend\n * @returns Promise with validation result\n */\nexport const validateToken = async (): Promise<TokenValidationResponse> => {\n  try {\n    const authHeader = getAuthHeader();\n    \n    if (!authHeader) {\n      throw new Error('No authentication token found');\n    }\n\n    const response = await apiClient.get<TokenValidationResponse>(\n      `${AUTH_ENDPOINT}/validate`\n    );\n\n    return response;\n\n  } catch (error: any) {\n    if (error.status) {\n      const status = error.status;\n      const message = error.response?.message || error.message || 'Token validation failed';\n      \n      throw new Error(message);\n    } else {\n      throw new Error('Network error during token validation');\n    }\n  }\n};\n\n/**\n * Logout function that calls the backend logout endpoint\n * @returns Promise that resolves when logout is complete\n */\nexport const logout = async (): Promise<void> => {\n  try {\n    const token = getToken();\n    \n    if (token) {\n      // Call backend logout endpoint\n      await apiClient.post(\n        `${AUTH_ENDPOINT}/logout`,\n        {}\n      );\n    }\n  } catch (error) {\n    // Log error but don't throw - logout should always succeed locally\n    console.warn('Backend logout failed:', error);\n  }\n};\n\n/**\n * Comprehensive logout function that handles both backend logout and local cleanup\n * This function calls POST /api/v1/auth/logout, clears stored JWT tokens, and can be used\n * independently or with AuthContext integration\n * \n * @returns Promise that resolves when logout process is complete\n * @throws Error only for critical failures that prevent local cleanup\n * \n * Usage:\n * ```typescript\n * // Standalone usage\n * await logoutUser();\n * \n * // With AuthContext (recommended)\n * const { logout } = useAuth();\n * await logout(); // This internally calls logoutUser\n * ```\n */\nexport const logoutUser = async (): Promise<void> => {\n  try {\n    // Step 1: Call backend logout endpoint to invalidate token server-side\n    await logout();\n  } catch (error) {\n    // Backend logout failed, but we should still clear local data\n    console.warn('Backend logout failed, proceeding with local cleanup:', error);\n  }\n  \n  // Step 2: Always clear local storage/session data regardless of backend response\n  // Import clearAuthData here to avoid circular dependencies\n  const { clearAuthData } = await import('../utils/tokenStorage');\n  clearAuthData();\n  \n  // Note: If using with AuthContext, the context's logout function will also\n  // dispatch the LOGOUT action to update the global state\n};\n\n// Note: The createAuthenticatedAxios function has been replaced by the new\n// secure API client utility (apiClient) which automatically handles\n// JWT token injection and authentication errors."],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}