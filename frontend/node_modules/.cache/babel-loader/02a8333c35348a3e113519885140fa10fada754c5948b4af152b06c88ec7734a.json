{"ast":null,"code":"/**\n * Fetches doctors by specialty ID from the backend API\n * \n * @param specialtyId - The ID of the specialty to filter doctors by\n * @returns Promise<Doctor[]> - Array of doctors for the specified specialty\n * @throws ApiError - When the API request fails or returns an error\n * \n * OpenAPI Specification:\n * GET /api/v1/doctors?specialty_id={specialtyId}\n * \n * Success Response (200):\n * {\n *   \"message\": \"Doctors retrieved successfully\",\n *   \"data\": Doctor[]\n * }\n * \n * Error Response (404):\n * {\n *   \"error\": \"Not Found\",\n *   \"message\": \"No doctors found for the specified specialty\"\n * }\n */\nexport async function fetchDoctorsBySpecialty(specialtyId) {\n  // Validate input\n  if (!specialtyId || specialtyId <= 0) {\n    throw new ApiError('Invalid specialty ID. Must be a positive number.', 400);\n  }\n  const url = `${API_BASE_URL}/doctors?specialty_id=${specialtyId}`;\n  try {\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    const authHeader = getAuthHeader();\n    if (authHeader) {\n      headers['Authorization'] = authHeader;\n    }\n    const response = await fetch(url, {\n      method: 'GET',\n      headers\n    });\n\n    // Handle different HTTP status codes\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({\n        error: 'Unknown Error',\n        message: `HTTP ${response.status}: ${response.statusText}`\n      }));\n\n      // Handle specific 404 case\n      if (response.status === 404) {\n        throw new ApiError(`No doctors found for specialty ID ${specialtyId}`, 404, errorData);\n      }\n\n      // Handle other error status codes\n      throw new ApiError(errorData.message || `Request failed with status ${response.status}`, response.status, errorData);\n    }\n\n    // Parse successful response\n    const apiResponse = await response.json();\n\n    // Validate response structure\n    if (!apiResponse.data || !Array.isArray(apiResponse.data)) {\n      throw new ApiError('Invalid response format from server', 500);\n    }\n    return apiResponse.data;\n  } catch (error) {\n    // Re-throw ApiError instances\n    if (error instanceof ApiError) {\n      throw error;\n    }\n\n    // Handle network errors and other exceptions\n    if (error instanceof TypeError && error.message.includes('fetch')) {\n      throw new ApiError('Network error: Unable to connect to the server. Please check your internet connection.', 0);\n    }\n\n    // Handle JSON parsing errors\n    if (error instanceof SyntaxError) {\n      throw new ApiError('Server returned invalid response format', 500);\n    }\n\n    // Handle unknown errors\n    throw new ApiError(`Unexpected error: ${error instanceof Error ? error.message : 'Unknown error occurred'}`, 500);\n  }\n}\n\n/**\n * Alternative implementation using axios (commented out)\n * Uncomment and install axios if preferred: npm install axios\n */\n/*\nimport axios, { AxiosError } from 'axios';\n\nexport async function fetchDoctorsBySpecialtyAxios(specialtyId: number): Promise<Doctor[]> {\n  if (!specialtyId || specialtyId <= 0) {\n    throw new ApiError('Invalid specialty ID. Must be a positive number.', 400);\n  }\n\n  try {\n    const response = await axios.get<ApiResponse<Doctor[]>>(\n      `${API_BASE_URL}/doctors`,\n      {\n        params: { specialty_id: specialtyId },\n        headers: {\n          ...(getAuthToken() && { 'Authorization': `Bearer ${getAuthToken()}` })\n        }\n      }\n    );\n\n    return response.data.data;\n\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      const axiosError = error as AxiosError<ErrorResponse>;\n      \n      if (axiosError.response?.status === 404) {\n        throw new ApiError(\n          `No doctors found for specialty ID ${specialtyId}`,\n          404,\n          axiosError.response.data\n        );\n      }\n\n      throw new ApiError(\n        axiosError.response?.data?.message || axiosError.message,\n        axiosError.response?.status || 500,\n        axiosError.response?.data\n      );\n    }\n\n    throw new ApiError(\n      `Unexpected error: ${error instanceof Error ? error.message : 'Unknown error occurred'}`,\n      500\n    );\n  }\n}\n*/\n\n/**\n * Example usage:\n * \n * try {\n *   const doctors = await fetchDoctorsBySpecialty(5);\n *   console.log('Doctors found:', doctors);\n * } catch (error) {\n *   if (error instanceof ApiError) {\n *     if (error.status === 404) {\n *       console.log('No doctors found for this specialty');\n *     } else {\n *       console.error('API Error:', error.message);\n *     }\n *   }\n * }\n */","map":{"version":3,"names":["fetchDoctorsBySpecialty","specialtyId","ApiError","url","API_BASE_URL","headers","authHeader","getAuthHeader","response","fetch","method","ok","errorData","json","catch","error","message","status","statusText","apiResponse","data","Array","isArray","TypeError","includes","SyntaxError","Error"],"sources":["C:/Users/HP/Smart-Doctor-Booking-Reminder-App/frontend/src/services/doctorApi.ts"],"sourcesContent":["import { Doctor } from '../types/auth';\nimport apiClient from '../utils/apiClient';\n\n/**\n * Fetches doctors by specialty ID from the backend API\n * \n * @param specialtyId - The ID of the specialty to filter doctors by\n * @returns Promise<Doctor[]> - Array of doctors for the specified specialty\n * @throws ApiError - When the API request fails or returns an error\n * \n * OpenAPI Specification:\n * GET /api/v1/doctors?specialty_id={specialtyId}\n * \n * Success Response (200):\n * {\n *   \"message\": \"Doctors retrieved successfully\",\n *   \"data\": Doctor[]\n * }\n * \n * Error Response (404):\n * {\n *   \"error\": \"Not Found\",\n *   \"message\": \"No doctors found for the specified specialty\"\n * }\n */\nexport async function fetchDoctorsBySpecialty(specialtyId: number): Promise<Doctor[]> {\n  // Validate input\n  if (!specialtyId || specialtyId <= 0) {\n    throw new ApiError('Invalid specialty ID. Must be a positive number.', 400);\n  }\n\n  const url = `${API_BASE_URL}/doctors?specialty_id=${specialtyId}`;\n  \n  try {\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json'\n    };\n    \n    const authHeader = getAuthHeader();\n    if (authHeader) {\n      headers['Authorization'] = authHeader;\n    }\n    \n    const response = await fetch(url, {\n      method: 'GET',\n      headers,\n    });\n\n    // Handle different HTTP status codes\n    if (!response.ok) {\n      const errorData: ErrorResponse = await response.json().catch(() => ({\n        error: 'Unknown Error',\n        message: `HTTP ${response.status}: ${response.statusText}`\n      }));\n\n      // Handle specific 404 case\n      if (response.status === 404) {\n        throw new ApiError(\n          `No doctors found for specialty ID ${specialtyId}`,\n          404,\n          errorData\n        );\n      }\n\n      // Handle other error status codes\n      throw new ApiError(\n        errorData.message || `Request failed with status ${response.status}`,\n        response.status,\n        errorData\n      );\n    }\n\n    // Parse successful response\n    const apiResponse: ApiResponse<Doctor[]> = await response.json();\n    \n    // Validate response structure\n    if (!apiResponse.data || !Array.isArray(apiResponse.data)) {\n      throw new ApiError('Invalid response format from server', 500);\n    }\n\n    return apiResponse.data;\n\n  } catch (error) {\n    // Re-throw ApiError instances\n    if (error instanceof ApiError) {\n      throw error;\n    }\n\n    // Handle network errors and other exceptions\n    if (error instanceof TypeError && error.message.includes('fetch')) {\n      throw new ApiError(\n        'Network error: Unable to connect to the server. Please check your internet connection.',\n        0\n      );\n    }\n\n    // Handle JSON parsing errors\n    if (error instanceof SyntaxError) {\n      throw new ApiError(\n        'Server returned invalid response format',\n        500\n      );\n    }\n\n    // Handle unknown errors\n    throw new ApiError(\n      `Unexpected error: ${error instanceof Error ? error.message : 'Unknown error occurred'}`,\n      500\n    );\n  }\n}\n\n/**\n * Alternative implementation using axios (commented out)\n * Uncomment and install axios if preferred: npm install axios\n */\n/*\nimport axios, { AxiosError } from 'axios';\n\nexport async function fetchDoctorsBySpecialtyAxios(specialtyId: number): Promise<Doctor[]> {\n  if (!specialtyId || specialtyId <= 0) {\n    throw new ApiError('Invalid specialty ID. Must be a positive number.', 400);\n  }\n\n  try {\n    const response = await axios.get<ApiResponse<Doctor[]>>(\n      `${API_BASE_URL}/doctors`,\n      {\n        params: { specialty_id: specialtyId },\n        headers: {\n          ...(getAuthToken() && { 'Authorization': `Bearer ${getAuthToken()}` })\n        }\n      }\n    );\n\n    return response.data.data;\n\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      const axiosError = error as AxiosError<ErrorResponse>;\n      \n      if (axiosError.response?.status === 404) {\n        throw new ApiError(\n          `No doctors found for specialty ID ${specialtyId}`,\n          404,\n          axiosError.response.data\n        );\n      }\n\n      throw new ApiError(\n        axiosError.response?.data?.message || axiosError.message,\n        axiosError.response?.status || 500,\n        axiosError.response?.data\n      );\n    }\n\n    throw new ApiError(\n      `Unexpected error: ${error instanceof Error ? error.message : 'Unknown error occurred'}`,\n      500\n    );\n  }\n}\n*/\n\n\n\n/**\n * Example usage:\n * \n * try {\n *   const doctors = await fetchDoctorsBySpecialty(5);\n *   console.log('Doctors found:', doctors);\n * } catch (error) {\n *   if (error instanceof ApiError) {\n *     if (error.status === 404) {\n *       console.log('No doctors found for this specialty');\n *     } else {\n *       console.error('API Error:', error.message);\n *     }\n *   }\n * }\n */"],"mappings":"AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeA,uBAAuBA,CAACC,WAAmB,EAAqB;EACpF;EACA,IAAI,CAACA,WAAW,IAAIA,WAAW,IAAI,CAAC,EAAE;IACpC,MAAM,IAAIC,QAAQ,CAAC,kDAAkD,EAAE,GAAG,CAAC;EAC7E;EAEA,MAAMC,GAAG,GAAG,GAAGC,YAAY,yBAAyBH,WAAW,EAAE;EAEjE,IAAI;IACF,MAAMI,OAA+B,GAAG;MACtC,cAAc,EAAE;IAClB,CAAC;IAED,MAAMC,UAAU,GAAGC,aAAa,CAAC,CAAC;IAClC,IAAID,UAAU,EAAE;MACdD,OAAO,CAAC,eAAe,CAAC,GAAGC,UAAU;IACvC;IAEA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACN,GAAG,EAAE;MAChCO,MAAM,EAAE,KAAK;MACbL;IACF,CAAC,CAAC;;IAEF;IACA,IAAI,CAACG,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAMC,SAAwB,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO;QAClEC,KAAK,EAAE,eAAe;QACtBC,OAAO,EAAE,QAAQR,QAAQ,CAACS,MAAM,KAAKT,QAAQ,CAACU,UAAU;MAC1D,CAAC,CAAC,CAAC;;MAEH;MACA,IAAIV,QAAQ,CAACS,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAM,IAAIf,QAAQ,CAChB,qCAAqCD,WAAW,EAAE,EAClD,GAAG,EACHW,SACF,CAAC;MACH;;MAEA;MACA,MAAM,IAAIV,QAAQ,CAChBU,SAAS,CAACI,OAAO,IAAI,8BAA8BR,QAAQ,CAACS,MAAM,EAAE,EACpET,QAAQ,CAACS,MAAM,EACfL,SACF,CAAC;IACH;;IAEA;IACA,MAAMO,WAAkC,GAAG,MAAMX,QAAQ,CAACK,IAAI,CAAC,CAAC;;IAEhE;IACA,IAAI,CAACM,WAAW,CAACC,IAAI,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,WAAW,CAACC,IAAI,CAAC,EAAE;MACzD,MAAM,IAAIlB,QAAQ,CAAC,qCAAqC,EAAE,GAAG,CAAC;IAChE;IAEA,OAAOiB,WAAW,CAACC,IAAI;EAEzB,CAAC,CAAC,OAAOL,KAAK,EAAE;IACd;IACA,IAAIA,KAAK,YAAYb,QAAQ,EAAE;MAC7B,MAAMa,KAAK;IACb;;IAEA;IACA,IAAIA,KAAK,YAAYQ,SAAS,IAAIR,KAAK,CAACC,OAAO,CAACQ,QAAQ,CAAC,OAAO,CAAC,EAAE;MACjE,MAAM,IAAItB,QAAQ,CAChB,wFAAwF,EACxF,CACF,CAAC;IACH;;IAEA;IACA,IAAIa,KAAK,YAAYU,WAAW,EAAE;MAChC,MAAM,IAAIvB,QAAQ,CAChB,yCAAyC,EACzC,GACF,CAAC;IACH;;IAEA;IACA,MAAM,IAAIA,QAAQ,CAChB,qBAAqBa,KAAK,YAAYW,KAAK,GAAGX,KAAK,CAACC,OAAO,GAAG,wBAAwB,EAAE,EACxF,GACF,CAAC;EACH;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}