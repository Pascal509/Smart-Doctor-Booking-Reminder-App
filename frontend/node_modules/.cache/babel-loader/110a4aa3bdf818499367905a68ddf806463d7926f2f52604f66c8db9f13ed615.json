{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport apiClient from '../api/clients/apiClient';\nimport { useAuth } from '../contexts/AuthContext';\n/**\n * Custom hook to fetch and manage patient appointments\n * Fetches appointments from GET /api/v1/appointments/patient\n */\nexport const usePatientAppointments = () => {\n  _s();\n  const [appointments, setAppointments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const {\n    authState\n  } = useAuth();\n  const {\n    user\n  } = authState;\n  const fetchAppointments = async () => {\n    if (!user) {\n      setAppointments([]);\n      setLoading(false);\n      return;\n    }\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await apiClient.get('/api/v1/appointments/patient');\n      if (Array.isArray(response)) {\n        setAppointments(response);\n      } else {\n        setError('Invalid response format');\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error('Error fetching patient appointments:', err);\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Failed to fetch appointments');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const refetch = async () => {\n    await fetchAppointments();\n  };\n  useEffect(() => {\n    fetchAppointments();\n  }, [user]);\n  return {\n    appointments,\n    loading,\n    error,\n    refetch\n  };\n};\n_s(usePatientAppointments, \"8R16cQyk+cxVhAhBXVKQmtaZYCM=\", false, function () {\n  return [useAuth];\n});","map":{"version":3,"names":["useState","useEffect","apiClient","useAuth","usePatientAppointments","_s","appointments","setAppointments","loading","setLoading","error","setError","authState","user","fetchAppointments","response","get","Array","isArray","err","_err$response","_err$response$data","console","data","message","refetch"],"sources":["C:/Users/HP/Smart-Doctor-Booking-Reminder-App/frontend/src/hooks/usePatientAppointments.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport apiClient from '../api/clients/apiClient';\nimport { Appointment, ApiResponse } from '../api/types/api';\nimport { useAuth } from '../contexts/AuthContext';\n\nexport interface UsePatientAppointmentsResult {\n  appointments: Appointment[];\n  loading: boolean;\n  error: string | null;\n  refetch: () => Promise<void>;\n}\n\n/**\n * Custom hook to fetch and manage patient appointments\n * Fetches appointments from GET /api/v1/appointments/patient\n */\nexport const usePatientAppointments = (): UsePatientAppointmentsResult => {\n  const [appointments, setAppointments] = useState<Appointment[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const { authState } = useAuth();\n  const { user } = authState;\n\n  const fetchAppointments = async () => {\n    if (!user) {\n      setAppointments([]);\n      setLoading(false);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await apiClient.get<Appointment[]>('/api/v1/appointments/patient');\n      \n      if (Array.isArray(response)) {\n        setAppointments(response);\n      } else {\n        setError('Invalid response format');\n      }\n    } catch (err: any) {\n      console.error('Error fetching patient appointments:', err);\n      setError(err.response?.data?.message || 'Failed to fetch appointments');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const refetch = async () => {\n    await fetchAppointments();\n  };\n\n  useEffect(() => {\n    fetchAppointments();\n  }, [user]);\n\n  return {\n    appointments,\n    loading,\n    error,\n    refetch\n  };\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,SAAS,MAAM,0BAA0B;AAEhD,SAASC,OAAO,QAAQ,yBAAyB;AASjD;AACA;AACA;AACA;AACA,OAAO,MAAMC,sBAAsB,GAAGA,CAAA,KAAoC;EAAAC,EAAA;EACxE,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAgB,EAAE,CAAC;EACnE,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAM;IAAEY;EAAU,CAAC,GAAGT,OAAO,CAAC,CAAC;EAC/B,MAAM;IAAEU;EAAK,CAAC,GAAGD,SAAS;EAE1B,MAAME,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI,CAACD,IAAI,EAAE;MACTN,eAAe,CAAC,EAAE,CAAC;MACnBE,UAAU,CAAC,KAAK,CAAC;MACjB;IACF;IAEA,IAAI;MACFA,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MAEd,MAAMI,QAAQ,GAAG,MAAMb,SAAS,CAACc,GAAG,CAAgB,8BAA8B,CAAC;MAEnF,IAAIC,KAAK,CAACC,OAAO,CAACH,QAAQ,CAAC,EAAE;QAC3BR,eAAe,CAACQ,QAAQ,CAAC;MAC3B,CAAC,MAAM;QACLJ,QAAQ,CAAC,yBAAyB,CAAC;MACrC;IACF,CAAC,CAAC,OAAOQ,GAAQ,EAAE;MAAA,IAAAC,aAAA,EAAAC,kBAAA;MACjBC,OAAO,CAACZ,KAAK,CAAC,sCAAsC,EAAES,GAAG,CAAC;MAC1DR,QAAQ,CAAC,EAAAS,aAAA,GAAAD,GAAG,CAACJ,QAAQ,cAAAK,aAAA,wBAAAC,kBAAA,GAAZD,aAAA,CAAcG,IAAI,cAAAF,kBAAA,uBAAlBA,kBAAA,CAAoBG,OAAO,KAAI,8BAA8B,CAAC;IACzE,CAAC,SAAS;MACRf,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMgB,OAAO,GAAG,MAAAA,CAAA,KAAY;IAC1B,MAAMX,iBAAiB,CAAC,CAAC;EAC3B,CAAC;EAEDb,SAAS,CAAC,MAAM;IACda,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,CAACD,IAAI,CAAC,CAAC;EAEV,OAAO;IACLP,YAAY;IACZE,OAAO;IACPE,KAAK;IACLe;EACF,CAAC;AACH,CAAC;AAACpB,EAAA,CA/CWD,sBAAsB;EAAA,QAIXD,OAAO;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}