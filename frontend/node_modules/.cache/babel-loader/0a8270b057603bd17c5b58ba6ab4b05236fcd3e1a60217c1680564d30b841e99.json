{"ast":null,"code":"// Secure token storage utility using sessionStorage\n// sessionStorage is more secure than localStorage as it's cleared when the tab is closed\n\nconst TOKEN_KEY = 'smart_doctor_auth_token';\nconst USER_KEY = 'smart_doctor_auth_user';\n\n/**\n * Securely store the JWT token in sessionStorage\n * @param token - JWT token string\n */\nexport const storeToken = token => {\n  try {\n    sessionStorage.setItem(TOKEN_KEY, token);\n  } catch (error) {\n    console.error('Failed to store token:', error);\n    throw new Error('Unable to store authentication token');\n  }\n};\n\n/**\n * Retrieve the JWT token from sessionStorage\n * @returns JWT token string or null if not found\n */\nexport const getToken = () => {\n  try {\n    return sessionStorage.getItem(TOKEN_KEY);\n  } catch (error) {\n    console.error('Failed to retrieve token:', error);\n    return null;\n  }\n};\n\n/**\n * Store user information in sessionStorage\n * @param user - User object to store\n */\nexport const storeUser = user => {\n  try {\n    sessionStorage.setItem(USER_KEY, JSON.stringify(user));\n  } catch (error) {\n    console.error('Failed to store user data:', error);\n    throw new Error('Unable to store user information');\n  }\n};\n\n/**\n * Retrieve user information from sessionStorage\n * @returns User object or null if not found\n */\nexport const getUser = () => {\n  try {\n    const userData = sessionStorage.getItem(USER_KEY);\n    return userData ? JSON.parse(userData) : null;\n  } catch (error) {\n    console.error('Failed to retrieve user data:', error);\n    return null;\n  }\n};\n\n/**\n * Remove the JWT token from sessionStorage\n */\nexport const removeToken = () => {\n  try {\n    sessionStorage.removeItem(TOKEN_KEY);\n  } catch (error) {\n    console.error('Failed to remove token:', error);\n  }\n};\n\n/**\n * Remove user information from sessionStorage\n */\nexport const removeUser = () => {\n  try {\n    sessionStorage.removeItem(USER_KEY);\n  } catch (error) {\n    console.error('Failed to remove user data:', error);\n  }\n};\n\n/**\n * Clear all authentication data from sessionStorage\n */\nexport const clearAuthData = () => {\n  removeToken();\n  removeUser();\n};\n\n/**\n * Check if a valid token exists in storage\n * @returns boolean indicating if token exists\n */\nexport const hasValidToken = () => {\n  const token = getToken();\n  return token !== null && token.length > 0;\n};\n\n/**\n * Get the Authorization header value for API requests\n * @returns Authorization header string or null\n */\nexport const getAuthHeader = () => {\n  const token = getToken();\n  return token ? `Bearer ${token}` : null;\n};","map":{"version":3,"names":["TOKEN_KEY","USER_KEY","storeToken","token","sessionStorage","setItem","error","console","Error","getToken","getItem","storeUser","user","JSON","stringify","getUser","userData","parse","removeToken","removeItem","removeUser","clearAuthData","hasValidToken","length","getAuthHeader"],"sources":["C:/Users/HP/Smart-Doctor-Booking-Reminder-App/frontend/src/utils/tokenStorage.ts"],"sourcesContent":["// Secure token storage utility using sessionStorage\n// sessionStorage is more secure than localStorage as it's cleared when the tab is closed\n\nconst TOKEN_KEY = 'smart_doctor_auth_token';\nconst USER_KEY = 'smart_doctor_auth_user';\n\n/**\n * Securely store the JWT token in sessionStorage\n * @param token - JWT token string\n */\nexport const storeToken = (token: string): void => {\n  try {\n    sessionStorage.setItem(TOKEN_KEY, token);\n  } catch (error) {\n    console.error('Failed to store token:', error);\n    throw new Error('Unable to store authentication token');\n  }\n};\n\n/**\n * Retrieve the JWT token from sessionStorage\n * @returns JWT token string or null if not found\n */\nexport const getToken = (): string | null => {\n  try {\n    return sessionStorage.getItem(TOKEN_KEY);\n  } catch (error) {\n    console.error('Failed to retrieve token:', error);\n    return null;\n  }\n};\n\n/**\n * Store user information in sessionStorage\n * @param user - User object to store\n */\nexport const storeUser = (user: any): void => {\n  try {\n    sessionStorage.setItem(USER_KEY, JSON.stringify(user));\n  } catch (error) {\n    console.error('Failed to store user data:', error);\n    throw new Error('Unable to store user information');\n  }\n};\n\n/**\n * Retrieve user information from sessionStorage\n * @returns User object or null if not found\n */\nexport const getUser = (): any | null => {\n  try {\n    const userData = sessionStorage.getItem(USER_KEY);\n    return userData ? JSON.parse(userData) : null;\n  } catch (error) {\n    console.error('Failed to retrieve user data:', error);\n    return null;\n  }\n};\n\n/**\n * Remove the JWT token from sessionStorage\n */\nexport const removeToken = (): void => {\n  try {\n    sessionStorage.removeItem(TOKEN_KEY);\n  } catch (error) {\n    console.error('Failed to remove token:', error);\n  }\n};\n\n/**\n * Remove user information from sessionStorage\n */\nexport const removeUser = (): void => {\n  try {\n    sessionStorage.removeItem(USER_KEY);\n  } catch (error) {\n    console.error('Failed to remove user data:', error);\n  }\n};\n\n/**\n * Clear all authentication data from sessionStorage\n */\nexport const clearAuthData = (): void => {\n  removeToken();\n  removeUser();\n};\n\n/**\n * Check if a valid token exists in storage\n * @returns boolean indicating if token exists\n */\nexport const hasValidToken = (): boolean => {\n  const token = getToken();\n  return token !== null && token.length > 0;\n};\n\n/**\n * Get the Authorization header value for API requests\n * @returns Authorization header string or null\n */\nexport const getAuthHeader = (): string | null => {\n  const token = getToken();\n  return token ? `Bearer ${token}` : null;\n};"],"mappings":"AAAA;AACA;;AAEA,MAAMA,SAAS,GAAG,yBAAyB;AAC3C,MAAMC,QAAQ,GAAG,wBAAwB;;AAEzC;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAIC,KAAa,IAAW;EACjD,IAAI;IACFC,cAAc,CAACC,OAAO,CAACL,SAAS,EAAEG,KAAK,CAAC;EAC1C,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAM,IAAIE,KAAK,CAAC,sCAAsC,CAAC;EACzD;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAqB;EAC3C,IAAI;IACF,OAAOL,cAAc,CAACM,OAAO,CAACV,SAAS,CAAC;EAC1C,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMK,SAAS,GAAIC,IAAS,IAAW;EAC5C,IAAI;IACFR,cAAc,CAACC,OAAO,CAACJ,QAAQ,EAAEY,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,CAAC;EACxD,CAAC,CAAC,OAAON,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAM,IAAIE,KAAK,CAAC,kCAAkC,CAAC;EACrD;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMO,OAAO,GAAGA,CAAA,KAAkB;EACvC,IAAI;IACF,MAAMC,QAAQ,GAAGZ,cAAc,CAACM,OAAO,CAACT,QAAQ,CAAC;IACjD,OAAOe,QAAQ,GAAGH,IAAI,CAACI,KAAK,CAACD,QAAQ,CAAC,GAAG,IAAI;EAC/C,CAAC,CAAC,OAAOV,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMY,WAAW,GAAGA,CAAA,KAAY;EACrC,IAAI;IACFd,cAAc,CAACe,UAAU,CAACnB,SAAS,CAAC;EACtC,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;EACjD;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMc,UAAU,GAAGA,CAAA,KAAY;EACpC,IAAI;IACFhB,cAAc,CAACe,UAAU,CAAClB,QAAQ,CAAC;EACrC,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;EACrD;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMe,aAAa,GAAGA,CAAA,KAAY;EACvCH,WAAW,CAAC,CAAC;EACbE,UAAU,CAAC,CAAC;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAME,aAAa,GAAGA,CAAA,KAAe;EAC1C,MAAMnB,KAAK,GAAGM,QAAQ,CAAC,CAAC;EACxB,OAAON,KAAK,KAAK,IAAI,IAAIA,KAAK,CAACoB,MAAM,GAAG,CAAC;AAC3C,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAqB;EAChD,MAAMrB,KAAK,GAAGM,QAAQ,CAAC,CAAC;EACxB,OAAON,KAAK,GAAG,UAAUA,KAAK,EAAE,GAAG,IAAI;AACzC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}