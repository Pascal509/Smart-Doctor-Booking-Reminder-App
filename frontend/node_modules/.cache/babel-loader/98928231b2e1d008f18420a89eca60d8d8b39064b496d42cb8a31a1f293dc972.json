{"ast":null,"code":"import apiClient from'./apiClient';/**\n * Fetches all doctors from the backend API\n * \n * @returns Promise<Doctor[]> - Array of all doctors\n * @throws Error - When the API request fails or returns an error\n */export const getDoctors=async()=>{try{const response=await apiClient.get('/doctors');return response;}catch(error){var _error$response;if(error.status===401){throw new Error('Authentication failed - please log in again');}const message=((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.message)||error.message||'Failed to fetch doctors';throw new Error(message);}};/**\n * Fetches doctors by specialty ID from the backend API\n * \n * @param specialtyId - The ID of the specialty to filter doctors by\n * @returns Promise<Doctor[]> - Array of doctors for the specified specialty\n * @throws ApiError - When the API request fails or returns an error\n * \n * OpenAPI Specification:\n * GET /api/v1/doctors?specialty_id={specialtyId}\n * \n * Success Response (200):\n * {\n *   \"message\": \"Doctors retrieved successfully\",\n *   \"data\": Doctor[]\n * }\n * \n * Error Response (404):\n * {\n *   \"error\": \"Not Found\",\n *   \"message\": \"No doctors found for the specified specialty\"\n * }\n */export const getDoctorsBySpecialty=async specialtyId=>{try{const response=await apiClient.get(\"/doctors?specialty_id=\".concat(specialtyId));return response;}catch(error){var _error$response2;if(error.status===401){throw new Error('Authentication failed - please log in again');}if(error.status===404){throw new Error('No doctors found for this specialty');}const message=((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.message)||error.message||'Failed to fetch doctors by specialty';throw new Error(message);}};/**\n * Creates a new doctor in the backend API\n * \n * @param data - The doctor data to create\n * @returns Promise<Doctor> - The created doctor object\n * @throws Error - When the API request fails or returns an error\n * \n * OpenAPI Specification:\n * POST /api/v1/doctors\n * \n * Request Body:\n * {\n *   \"name\": \"string\",\n *   \"specialty_id\": number,\n *   \"is_active\": boolean (optional, defaults to true)\n * }\n * \n * Success Response (201):\n * {\n *   \"message\": \"Doctor created successfully\",\n *   \"data\": Doctor\n * }\n * \n * Error Response (400):\n * {\n *   \"error\": \"Bad Request\",\n *   \"message\": \"Invalid doctor data\"\n * }\n */export const createDoctor=async data=>{try{const response=await apiClient.post('/doctors',data);return response;}catch(error){var _error$response3;if(error.status===401){throw new Error('Authentication failed - please log in again');}if(error.status===400){throw new Error('Invalid doctor data - please check your input');}const message=((_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.message)||error.message||'Failed to create doctor';throw new Error(message);}};/**\n * Fetches a single doctor by ID from the backend API\n * \n * @param id - The ID of the doctor to fetch\n * @returns Promise<Doctor> - The doctor object\n * @throws Error - When the API request fails or returns an error\n * \n * OpenAPI Specification:\n * GET /api/v1/doctors/:id\n * \n * Success Response (200):\n * {\n *   \"message\": \"Doctor retrieved successfully\",\n *   \"data\": Doctor\n * }\n * \n * Error Response (404):\n * {\n *   \"error\": \"Not Found\",\n *   \"message\": \"Doctor not found\"\n * }\n */export const getDoctorById=async id=>{try{const response=await apiClient.get(\"/doctors/\".concat(id));return response;}catch(error){var _error$response4;if(error.status===401){throw new Error('Authentication failed - please log in again');}if(error.status===404){throw new Error('Doctor not found');}const message=((_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.message)||error.message||'Failed to fetch doctor';throw new Error(message);}};/**\n * Update a doctor's information\n * @param id - The doctor's ID\n * @param data - Partial doctor data to update\n * @returns Promise<Doctor> - The updated doctor object\n * @throws Error if update fails or unauthorized\n */export const updateDoctor=async(id,data)=>{try{const response=await apiClient.put(\"/doctors/\".concat(id),data);return response;}catch(error){var _error$response6;if(error.status===401){throw new Error('Authentication required. Please log in.');}if(error.status===403){throw new Error('You do not have permission to update this doctor.');}if(error.status===404){throw new Error('Doctor not found.');}if(error.status===400){var _error$response5;throw new Error(((_error$response5=error.response)===null||_error$response5===void 0?void 0:_error$response5.message)||'Invalid data provided.');}throw new Error(((_error$response6=error.response)===null||_error$response6===void 0?void 0:_error$response6.message)||error.message||'Failed to update doctor');}};/**\n * Alternative implementation using axios (commented out)\n * Uncomment and install axios if preferred: npm install axios\n *//*\nimport axios, { AxiosError } from 'axios';\n\nexport async function fetchDoctorsBySpecialtyAxios(specialtyId: number): Promise<Doctor[]> {\n  if (!specialtyId || specialtyId <= 0) {\n    throw new ApiError('Invalid specialty ID. Must be a positive number.', 400);\n  }\n\n  try {\n    const response = await axios.get<ApiResponse<Doctor[]>>(\n      `${API_BASE_URL}/doctors`,\n      {\n        params: { specialty_id: specialtyId },\n        headers: {\n          ...(getAuthToken() && { 'Authorization': `Bearer ${getAuthToken()}` })\n        }\n      }\n    );\n\n    return response.data.data;\n\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      const axiosError = error as AxiosError<ErrorResponse>;\n      \n      if (axiosError.response?.status === 404) {\n        throw new ApiError(\n          `No doctors found for specialty ID ${specialtyId}`,\n          404,\n          axiosError.response.data\n        );\n      }\n\n      throw new ApiError(\n        axiosError.response?.data?.message || axiosError.message,\n        axiosError.response?.status || 500,\n        axiosError.response?.data\n      );\n    }\n\n    throw new ApiError(\n      `Unexpected error: ${error instanceof Error ? error.message : 'Unknown error occurred'}`,\n      500\n    );\n  }\n}\n*//**\n * Example usage:\n * \n * try {\n *   const doctors = await fetchDoctorsBySpecialty(5);\n *   console.log('Doctors found:', doctors);\n * } catch (error) {\n *   if (error instanceof ApiError) {\n *     if (error.status === 404) {\n *       console.log('No doctors found for this specialty');\n *     } else {\n *       console.error('API Error:', error.message);\n *     }\n *   }\n * }\n */","map":{"version":3,"names":["apiClient","getDoctors","response","get","error","_error$response","status","Error","message","getDoctorsBySpecialty","specialtyId","concat","_error$response2","createDoctor","data","post","_error$response3","getDoctorById","id","_error$response4","updateDoctor","put","_error$response6","_error$response5"],"sources":["C:/Users/HP/Smart-Doctor-Booking-Reminder-App/frontend/src/api/clients/doctorApi.ts"],"sourcesContent":["import { Doctor, DoctorData } from '../types/api';\nimport apiClient from './apiClient';\n\n/**\n * Fetches all doctors from the backend API\n * \n * @returns Promise<Doctor[]> - Array of all doctors\n * @throws Error - When the API request fails or returns an error\n */\nexport const getDoctors = async (): Promise<Doctor[]> => {\n  try {\n    const response = await apiClient.get<Doctor[]>('/doctors');\n    return response;\n  } catch (error: any) {\n    if (error.status === 401) {\n      throw new Error('Authentication failed - please log in again');\n    }\n    \n    const message = error.response?.message || error.message || 'Failed to fetch doctors';\n    throw new Error(message);\n  }\n};\n\n/**\n * Fetches doctors by specialty ID from the backend API\n * \n * @param specialtyId - The ID of the specialty to filter doctors by\n * @returns Promise<Doctor[]> - Array of doctors for the specified specialty\n * @throws ApiError - When the API request fails or returns an error\n * \n * OpenAPI Specification:\n * GET /api/v1/doctors?specialty_id={specialtyId}\n * \n * Success Response (200):\n * {\n *   \"message\": \"Doctors retrieved successfully\",\n *   \"data\": Doctor[]\n * }\n * \n * Error Response (404):\n * {\n *   \"error\": \"Not Found\",\n *   \"message\": \"No doctors found for the specified specialty\"\n * }\n */\nexport const getDoctorsBySpecialty = async (specialtyId: number): Promise<Doctor[]> => {\n  try {\n    const response = await apiClient.get<Doctor[]>(\n      `/doctors?specialty_id=${specialtyId}`\n    );\n    return response;\n  } catch (error: any) {\n    if (error.status === 401) {\n      throw new Error('Authentication failed - please log in again');\n    }\n    \n    if (error.status === 404) {\n      throw new Error('No doctors found for this specialty');\n    }\n    \n    const message = error.response?.message || error.message || 'Failed to fetch doctors by specialty';\n    throw new Error(message);\n  }\n};\n\n/**\n * Creates a new doctor in the backend API\n * \n * @param data - The doctor data to create\n * @returns Promise<Doctor> - The created doctor object\n * @throws Error - When the API request fails or returns an error\n * \n * OpenAPI Specification:\n * POST /api/v1/doctors\n * \n * Request Body:\n * {\n *   \"name\": \"string\",\n *   \"specialty_id\": number,\n *   \"is_active\": boolean (optional, defaults to true)\n * }\n * \n * Success Response (201):\n * {\n *   \"message\": \"Doctor created successfully\",\n *   \"data\": Doctor\n * }\n * \n * Error Response (400):\n * {\n *   \"error\": \"Bad Request\",\n *   \"message\": \"Invalid doctor data\"\n * }\n */\nexport const createDoctor = async (data: DoctorData): Promise<Doctor> => {\n  try {\n    const response = await apiClient.post<Doctor>('/doctors', data);\n    return response;\n  } catch (error: any) {\n    if (error.status === 401) {\n      throw new Error('Authentication failed - please log in again');\n    }\n    \n    if (error.status === 400) {\n      throw new Error('Invalid doctor data - please check your input');\n    }\n    \n    const message = error.response?.message || error.message || 'Failed to create doctor';\n    throw new Error(message);\n  }\n};\n\n/**\n * Fetches a single doctor by ID from the backend API\n * \n * @param id - The ID of the doctor to fetch\n * @returns Promise<Doctor> - The doctor object\n * @throws Error - When the API request fails or returns an error\n * \n * OpenAPI Specification:\n * GET /api/v1/doctors/:id\n * \n * Success Response (200):\n * {\n *   \"message\": \"Doctor retrieved successfully\",\n *   \"data\": Doctor\n * }\n * \n * Error Response (404):\n * {\n *   \"error\": \"Not Found\",\n *   \"message\": \"Doctor not found\"\n * }\n */\nexport const getDoctorById = async (id: number): Promise<Doctor> => {\n  try {\n    const response = await apiClient.get<Doctor>(`/doctors/${id}`);\n    return response;\n  } catch (error: any) {\n    if (error.status === 401) {\n      throw new Error('Authentication failed - please log in again');\n    }\n    \n    if (error.status === 404) {\n      throw new Error('Doctor not found');\n    }\n    \n    const message = error.response?.message || error.message || 'Failed to fetch doctor';\n    throw new Error(message);\n  }\n};\n\n/**\n * Update a doctor's information\n * @param id - The doctor's ID\n * @param data - Partial doctor data to update\n * @returns Promise<Doctor> - The updated doctor object\n * @throws Error if update fails or unauthorized\n */\nexport const updateDoctor = async (id: number, data: Partial<DoctorData>): Promise<Doctor> => {\n  try {\n    const response = await apiClient.put<Doctor>(`/doctors/${id}`, data);\n    return response;\n  } catch (error: any) {\n    if (error.status === 401) {\n      throw new Error('Authentication required. Please log in.');\n    }\n    if (error.status === 403) {\n      throw new Error('You do not have permission to update this doctor.');\n    }\n    if (error.status === 404) {\n      throw new Error('Doctor not found.');\n    }\n    if (error.status === 400) {\n      throw new Error(error.response?.message || 'Invalid data provided.');\n    }\n    throw new Error(error.response?.message || error.message || 'Failed to update doctor');\n  }\n};\n\n/**\n * Alternative implementation using axios (commented out)\n * Uncomment and install axios if preferred: npm install axios\n */\n/*\nimport axios, { AxiosError } from 'axios';\n\nexport async function fetchDoctorsBySpecialtyAxios(specialtyId: number): Promise<Doctor[]> {\n  if (!specialtyId || specialtyId <= 0) {\n    throw new ApiError('Invalid specialty ID. Must be a positive number.', 400);\n  }\n\n  try {\n    const response = await axios.get<ApiResponse<Doctor[]>>(\n      `${API_BASE_URL}/doctors`,\n      {\n        params: { specialty_id: specialtyId },\n        headers: {\n          ...(getAuthToken() && { 'Authorization': `Bearer ${getAuthToken()}` })\n        }\n      }\n    );\n\n    return response.data.data;\n\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      const axiosError = error as AxiosError<ErrorResponse>;\n      \n      if (axiosError.response?.status === 404) {\n        throw new ApiError(\n          `No doctors found for specialty ID ${specialtyId}`,\n          404,\n          axiosError.response.data\n        );\n      }\n\n      throw new ApiError(\n        axiosError.response?.data?.message || axiosError.message,\n        axiosError.response?.status || 500,\n        axiosError.response?.data\n      );\n    }\n\n    throw new ApiError(\n      `Unexpected error: ${error instanceof Error ? error.message : 'Unknown error occurred'}`,\n      500\n    );\n  }\n}\n*/\n\n\n\n/**\n * Example usage:\n * \n * try {\n *   const doctors = await fetchDoctorsBySpecialty(5);\n *   console.log('Doctors found:', doctors);\n * } catch (error) {\n *   if (error instanceof ApiError) {\n *     if (error.status === 404) {\n *       console.log('No doctors found for this specialty');\n *     } else {\n *       console.error('API Error:', error.message);\n *     }\n *   }\n * }\n */"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}