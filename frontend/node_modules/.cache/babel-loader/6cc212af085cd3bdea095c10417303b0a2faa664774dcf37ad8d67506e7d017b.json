{"ast":null,"code":"import axios from 'axios';\nimport { getToken, clearAuthData } from '../../utils/tokenStorage';\n\n/**\n * Configuration options for the API client\n */\n\n/**\n * Custom error class for API client errors\n */\nexport class ApiClientError extends Error {\n  constructor(message, status, code, response) {\n    super(message);\n    this.status = void 0;\n    this.code = void 0;\n    this.response = void 0;\n    this.name = 'ApiClientError';\n    this.status = status;\n    this.code = code;\n    this.response = response;\n  }\n}\n\n/**\n * Secure API Client utility that automatically handles JWT token injection\n * and provides a consistent interface for all API calls\n */\nclass SecureApiClient {\n  constructor(config = {}) {\n    this.axiosInstance = void 0;\n    this.config = void 0;\n    this.config = {\n      baseURL: config.baseURL || process.env.REACT_APP_API_BASE_URL || 'http://localhost:8080',\n      timeout: config.timeout || 10000,\n      retryAttempts: config.retryAttempts || 3,\n      retryDelay: config.retryDelay || 1000\n    };\n    this.axiosInstance = axios.create({\n      baseURL: this.config.baseURL,\n      timeout: this.config.timeout,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    this.setupInterceptors();\n  }\n\n  /**\n   * Setup request and response interceptors\n   */\n  setupInterceptors() {\n    // Request interceptor - automatically inject JWT token\n    this.axiosInstance.interceptors.request.use(config => {\n      const token = getToken();\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(new ApiClientError('Request setup failed', undefined, 'REQUEST_SETUP_ERROR', error));\n    });\n\n    // Response interceptor - handle common errors and token expiration\n    this.axiosInstance.interceptors.response.use(response => response, async error => {\n      var _error$response, _error$response3, _error$response4;\n      const originalRequest = error.config;\n\n      // Handle 401 Unauthorized - token expired or invalid\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n        var _error$response2;\n        originalRequest._retry = true;\n\n        // Clear invalid token\n        clearAuthData();\n\n        // Redirect to login or emit event for global handling\n        if (typeof window !== 'undefined') {\n          window.dispatchEvent(new CustomEvent('auth:token-expired'));\n        }\n        return Promise.reject(new ApiClientError('Authentication failed - token expired or invalid', 401, 'TOKEN_EXPIRED', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data));\n      }\n\n      // Handle other HTTP errors\n      const status = (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status;\n      const errorData = (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data;\n      const message = (errorData === null || errorData === void 0 ? void 0 : errorData.message) || error.message || 'An error occurred';\n      return Promise.reject(new ApiClientError(message, status, error.code, errorData));\n    });\n  }\n\n  /**\n   * Retry mechanism for failed requests\n   */\n  async retryRequest(requestFn, attempt = 1) {\n    try {\n      return await requestFn();\n    } catch (error) {\n      if (attempt < this.config.retryAttempts && this.shouldRetry(error)) {\n        await this.delay(this.config.retryDelay * attempt);\n        return this.retryRequest(requestFn, attempt + 1);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Determine if a request should be retried\n   */\n  shouldRetry(error) {\n    // Retry on network errors or 5xx server errors, but not on 4xx client errors\n    return !error.status || error.status >= 500 && error.status < 600;\n  }\n\n  /**\n   * Delay utility for retry mechanism\n   */\n  delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * GET request\n   */\n  async get(url, config) {\n    const response = await this.retryRequest(() => this.axiosInstance.get(url, config));\n    return response.data;\n  }\n\n  /**\n   * POST request\n   */\n  async post(url, data, config) {\n    const response = await this.retryRequest(() => this.axiosInstance.post(url, data, config));\n    return response.data;\n  }\n\n  /**\n   * PUT request\n   */\n  async put(url, data, config) {\n    const response = await this.retryRequest(() => this.axiosInstance.put(url, data, config));\n    return response.data;\n  }\n\n  /**\n   * PATCH request\n   */\n  async patch(url, data, config) {\n    const response = await this.retryRequest(() => this.axiosInstance.patch(url, data, config));\n    return response.data;\n  }\n\n  /**\n   * DELETE request\n   */\n  async delete(url, config) {\n    const response = await this.retryRequest(() => this.axiosInstance.delete(url, config));\n    return response.data;\n  }\n\n  /**\n   * Get the underlying axios instance for advanced usage\n   */\n  getAxiosInstance() {\n    return this.axiosInstance;\n  }\n\n  /**\n   * Update the base URL\n   */\n  setBaseURL(baseURL) {\n    this.config.baseURL = baseURL;\n    this.axiosInstance.defaults.baseURL = baseURL;\n  }\n\n  /**\n   * Set custom headers\n   */\n  setHeaders(headers) {\n    Object.assign(this.axiosInstance.defaults.headers, headers);\n  }\n\n  /**\n   * Clear all custom headers except Content-Type and Authorization\n   */\n  clearCustomHeaders() {\n    // Reset to default headers\n    this.axiosInstance.defaults.headers.common = {\n      'Content-Type': 'application/json'\n    };\n  }\n}\n\n// Create and export a singleton instance\nconst apiClient = new SecureApiClient();\nexport default apiClient;\n\n// Export the class for custom instances if needed\nexport { SecureApiClient };\n\n// Export convenience methods for direct usage\nexport const api = {\n  get: (url, config) => apiClient.get(url, config),\n  post: (url, data, config) => apiClient.post(url, data, config),\n  put: (url, data, config) => apiClient.put(url, data, config),\n  patch: (url, data, config) => apiClient.patch(url, data, config),\n  delete: (url, config) => apiClient.delete(url, config)\n};\n\n/**\n * Usage Examples:\n * \n * // Using the singleton instance\n * import apiClient from './utils/apiClient';\n * const doctors = await apiClient.get('/api/v1/doctors');\n * \n * // Using convenience methods\n * import { api } from './utils/apiClient';\n * const appointment = await api.post('/api/v1/appointments', appointmentData);\n * \n * // Creating a custom instance\n * import { SecureApiClient } from './utils/apiClient';\n * const customClient = new SecureApiClient({ baseURL: 'https://api.example.com' });\n * \n * // Handling token expiration events\n * window.addEventListener('auth:token-expired', () => {\n *   // Redirect to login or show login modal\n *   window.location.href = '/login';\n * });\n */","map":{"version":3,"names":["axios","getToken","clearAuthData","ApiClientError","Error","constructor","message","status","code","response","name","SecureApiClient","config","axiosInstance","baseURL","process","env","REACT_APP_API_BASE_URL","timeout","retryAttempts","retryDelay","create","headers","setupInterceptors","interceptors","request","use","token","Authorization","error","Promise","reject","undefined","_error$response","_error$response3","_error$response4","originalRequest","_retry","_error$response2","window","dispatchEvent","CustomEvent","data","errorData","retryRequest","requestFn","attempt","shouldRetry","delay","ms","resolve","setTimeout","get","url","post","put","patch","delete","getAxiosInstance","setBaseURL","defaults","setHeaders","Object","assign","clearCustomHeaders","common","apiClient","api"],"sources":["C:/Users/HP/Smart-Doctor-Booking-Reminder-App/frontend/src/api/clients/apiClient.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';\nimport { getToken, clearAuthData } from '../../utils/tokenStorage';\n\n/**\n * Configuration options for the API client\n */\ninterface ApiClientConfig {\n  baseURL?: string;\n  timeout?: number;\n  retryAttempts?: number;\n  retryDelay?: number;\n}\n\n/**\n * Custom error class for API client errors\n */\nexport class ApiClientError extends Error {\n  public status?: number;\n  public code?: string;\n  public response?: any;\n\n  constructor(message: string, status?: number, code?: string, response?: any) {\n    super(message);\n    this.name = 'ApiClientError';\n    this.status = status;\n    this.code = code;\n    this.response = response;\n  }\n}\n\n/**\n * Secure API Client utility that automatically handles JWT token injection\n * and provides a consistent interface for all API calls\n */\nclass SecureApiClient {\n  private axiosInstance: AxiosInstance;\n  private config: Required<ApiClientConfig>;\n\n  constructor(config: ApiClientConfig = {}) {\n    this.config = {\n      baseURL: config.baseURL || process.env.REACT_APP_API_BASE_URL || 'http://localhost:8080',\n      timeout: config.timeout || 10000,\n      retryAttempts: config.retryAttempts || 3,\n      retryDelay: config.retryDelay || 1000,\n    };\n\n    this.axiosInstance = axios.create({\n      baseURL: this.config.baseURL,\n      timeout: this.config.timeout,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    this.setupInterceptors();\n  }\n\n  /**\n   * Setup request and response interceptors\n   */\n  private setupInterceptors(): void {\n    // Request interceptor - automatically inject JWT token\n    this.axiosInstance.interceptors.request.use(\n      (config) => {\n        const token = getToken();\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      (error) => {\n        return Promise.reject(new ApiClientError('Request setup failed', undefined, 'REQUEST_SETUP_ERROR', error));\n      }\n    );\n\n    // Response interceptor - handle common errors and token expiration\n    this.axiosInstance.interceptors.response.use(\n      (response) => response,\n      async (error: AxiosError) => {\n        const originalRequest = error.config as AxiosRequestConfig & { _retry?: boolean };\n\n        // Handle 401 Unauthorized - token expired or invalid\n        if (error.response?.status === 401 && !originalRequest._retry) {\n          originalRequest._retry = true;\n          \n          // Clear invalid token\n          clearAuthData();\n          \n          // Redirect to login or emit event for global handling\n          if (typeof window !== 'undefined') {\n            window.dispatchEvent(new CustomEvent('auth:token-expired'));\n          }\n          \n          return Promise.reject(new ApiClientError(\n            'Authentication failed - token expired or invalid',\n            401,\n            'TOKEN_EXPIRED',\n            error.response?.data\n          ));\n        }\n\n        // Handle other HTTP errors\n        const status = error.response?.status;\n        const errorData = error.response?.data as any;\n        const message = errorData?.message || (error as any).message || 'An error occurred';\n        \n        return Promise.reject(new ApiClientError(\n          message,\n          status,\n          error.code,\n          errorData\n        ));\n      }\n    );\n  }\n\n  /**\n   * Retry mechanism for failed requests\n   */\n  private async retryRequest<T>(\n    requestFn: () => Promise<AxiosResponse<T>>,\n    attempt: number = 1\n  ): Promise<AxiosResponse<T>> {\n    try {\n      return await requestFn();\n    } catch (error) {\n      if (attempt < this.config.retryAttempts && this.shouldRetry(error as ApiClientError)) {\n        await this.delay(this.config.retryDelay * attempt);\n        return this.retryRequest(requestFn, attempt + 1);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Determine if a request should be retried\n   */\n  private shouldRetry(error: ApiClientError): boolean {\n    // Retry on network errors or 5xx server errors, but not on 4xx client errors\n    return !error.status || (error.status >= 500 && error.status < 600);\n  }\n\n  /**\n   * Delay utility for retry mechanism\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * GET request\n   */\n  async get<T = any>(url: string, config?: AxiosRequestConfig): Promise<T> {\n    const response = await this.retryRequest(() => this.axiosInstance.get<T>(url, config));\n    return response.data;\n  }\n\n  /**\n   * POST request\n   */\n  async post<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> {\n    const response = await this.retryRequest(() => this.axiosInstance.post<T>(url, data, config));\n    return response.data;\n  }\n\n  /**\n   * PUT request\n   */\n  async put<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> {\n    const response = await this.retryRequest(() => this.axiosInstance.put<T>(url, data, config));\n    return response.data;\n  }\n\n  /**\n   * PATCH request\n   */\n  async patch<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> {\n    const response = await this.retryRequest(() => this.axiosInstance.patch<T>(url, data, config));\n    return response.data;\n  }\n\n  /**\n   * DELETE request\n   */\n  async delete<T = any>(url: string, config?: AxiosRequestConfig): Promise<T> {\n    const response = await this.retryRequest(() => this.axiosInstance.delete<T>(url, config));\n    return response.data;\n  }\n\n  /**\n   * Get the underlying axios instance for advanced usage\n   */\n  getAxiosInstance(): AxiosInstance {\n    return this.axiosInstance;\n  }\n\n  /**\n   * Update the base URL\n   */\n  setBaseURL(baseURL: string): void {\n    this.config.baseURL = baseURL;\n    this.axiosInstance.defaults.baseURL = baseURL;\n  }\n\n  /**\n   * Set custom headers\n   */\n  setHeaders(headers: Record<string, string>): void {\n    Object.assign(this.axiosInstance.defaults.headers, headers);\n  }\n\n  /**\n   * Clear all custom headers except Content-Type and Authorization\n   */\n  clearCustomHeaders(): void {\n    // Reset to default headers\n    this.axiosInstance.defaults.headers.common = {\n      'Content-Type': 'application/json',\n    };\n  }\n}\n\n// Create and export a singleton instance\nconst apiClient = new SecureApiClient();\n\nexport default apiClient;\n\n// Export the class for custom instances if needed\nexport { SecureApiClient };\n\n// Export convenience methods for direct usage\nexport const api = {\n  get: <T = any>(url: string, config?: AxiosRequestConfig) => apiClient.get<T>(url, config),\n  post: <T = any>(url: string, data?: any, config?: AxiosRequestConfig) => apiClient.post<T>(url, data, config),\n  put: <T = any>(url: string, data?: any, config?: AxiosRequestConfig) => apiClient.put<T>(url, data, config),\n  patch: <T = any>(url: string, data?: any, config?: AxiosRequestConfig) => apiClient.patch<T>(url, data, config),\n  delete: <T = any>(url: string, config?: AxiosRequestConfig) => apiClient.delete<T>(url, config),\n};\n\n/**\n * Usage Examples:\n * \n * // Using the singleton instance\n * import apiClient from './utils/apiClient';\n * const doctors = await apiClient.get('/api/v1/doctors');\n * \n * // Using convenience methods\n * import { api } from './utils/apiClient';\n * const appointment = await api.post('/api/v1/appointments', appointmentData);\n * \n * // Creating a custom instance\n * import { SecureApiClient } from './utils/apiClient';\n * const customClient = new SecureApiClient({ baseURL: 'https://api.example.com' });\n * \n * // Handling token expiration events\n * window.addEventListener('auth:token-expired', () => {\n *   // Redirect to login or show login modal\n *   window.location.href = '/login';\n * });\n */"],"mappings":"AAAA,OAAOA,KAAK,MAAwE,OAAO;AAC3F,SAASC,QAAQ,EAAEC,aAAa,QAAQ,0BAA0B;;AAElE;AACA;AACA;;AAQA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,SAASC,KAAK,CAAC;EAKxCC,WAAWA,CAACC,OAAe,EAAEC,MAAe,EAAEC,IAAa,EAAEC,QAAc,EAAE;IAC3E,KAAK,CAACH,OAAO,CAAC;IAAC,KALVC,MAAM;IAAA,KACNC,IAAI;IAAA,KACJC,QAAQ;IAIb,IAAI,CAACC,IAAI,GAAG,gBAAgB;IAC5B,IAAI,CAACH,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;EAC1B;AACF;;AAEA;AACA;AACA;AACA;AACA,MAAME,eAAe,CAAC;EAIpBN,WAAWA,CAACO,MAAuB,GAAG,CAAC,CAAC,EAAE;IAAA,KAHlCC,aAAa;IAAA,KACbD,MAAM;IAGZ,IAAI,CAACA,MAAM,GAAG;MACZE,OAAO,EAAEF,MAAM,CAACE,OAAO,IAAIC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,uBAAuB;MACxFC,OAAO,EAAEN,MAAM,CAACM,OAAO,IAAI,KAAK;MAChCC,aAAa,EAAEP,MAAM,CAACO,aAAa,IAAI,CAAC;MACxCC,UAAU,EAAER,MAAM,CAACQ,UAAU,IAAI;IACnC,CAAC;IAED,IAAI,CAACP,aAAa,GAAGb,KAAK,CAACqB,MAAM,CAAC;MAChCP,OAAO,EAAE,IAAI,CAACF,MAAM,CAACE,OAAO;MAC5BI,OAAO,EAAE,IAAI,CAACN,MAAM,CAACM,OAAO;MAC5BI,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,IAAI,CAACC,iBAAiB,CAAC,CAAC;EAC1B;;EAEA;AACF;AACA;EACUA,iBAAiBA,CAAA,EAAS;IAChC;IACA,IAAI,CAACV,aAAa,CAACW,YAAY,CAACC,OAAO,CAACC,GAAG,CACxCd,MAAM,IAAK;MACV,MAAMe,KAAK,GAAG1B,QAAQ,CAAC,CAAC;MACxB,IAAI0B,KAAK,EAAE;QACTf,MAAM,CAACU,OAAO,CAACM,aAAa,GAAG,UAAUD,KAAK,EAAE;MAClD;MACA,OAAOf,MAAM;IACf,CAAC,EACAiB,KAAK,IAAK;MACT,OAAOC,OAAO,CAACC,MAAM,CAAC,IAAI5B,cAAc,CAAC,sBAAsB,EAAE6B,SAAS,EAAE,qBAAqB,EAAEH,KAAK,CAAC,CAAC;IAC5G,CACF,CAAC;;IAED;IACA,IAAI,CAAChB,aAAa,CAACW,YAAY,CAACf,QAAQ,CAACiB,GAAG,CACzCjB,QAAQ,IAAKA,QAAQ,EACtB,MAAOoB,KAAiB,IAAK;MAAA,IAAAI,eAAA,EAAAC,gBAAA,EAAAC,gBAAA;MAC3B,MAAMC,eAAe,GAAGP,KAAK,CAACjB,MAAmD;;MAEjF;MACA,IAAI,EAAAqB,eAAA,GAAAJ,KAAK,CAACpB,QAAQ,cAAAwB,eAAA,uBAAdA,eAAA,CAAgB1B,MAAM,MAAK,GAAG,IAAI,CAAC6B,eAAe,CAACC,MAAM,EAAE;QAAA,IAAAC,gBAAA;QAC7DF,eAAe,CAACC,MAAM,GAAG,IAAI;;QAE7B;QACAnC,aAAa,CAAC,CAAC;;QAEf;QACA,IAAI,OAAOqC,MAAM,KAAK,WAAW,EAAE;UACjCA,MAAM,CAACC,aAAa,CAAC,IAAIC,WAAW,CAAC,oBAAoB,CAAC,CAAC;QAC7D;QAEA,OAAOX,OAAO,CAACC,MAAM,CAAC,IAAI5B,cAAc,CACtC,kDAAkD,EAClD,GAAG,EACH,eAAe,GAAAmC,gBAAA,GACfT,KAAK,CAACpB,QAAQ,cAAA6B,gBAAA,uBAAdA,gBAAA,CAAgBI,IAClB,CAAC,CAAC;MACJ;;MAEA;MACA,MAAMnC,MAAM,IAAA2B,gBAAA,GAAGL,KAAK,CAACpB,QAAQ,cAAAyB,gBAAA,uBAAdA,gBAAA,CAAgB3B,MAAM;MACrC,MAAMoC,SAAS,IAAAR,gBAAA,GAAGN,KAAK,CAACpB,QAAQ,cAAA0B,gBAAA,uBAAdA,gBAAA,CAAgBO,IAAW;MAC7C,MAAMpC,OAAO,GAAG,CAAAqC,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAErC,OAAO,KAAKuB,KAAK,CAASvB,OAAO,IAAI,mBAAmB;MAEnF,OAAOwB,OAAO,CAACC,MAAM,CAAC,IAAI5B,cAAc,CACtCG,OAAO,EACPC,MAAM,EACNsB,KAAK,CAACrB,IAAI,EACVmC,SACF,CAAC,CAAC;IACJ,CACF,CAAC;EACH;;EAEA;AACF;AACA;EACE,MAAcC,YAAYA,CACxBC,SAA0C,EAC1CC,OAAe,GAAG,CAAC,EACQ;IAC3B,IAAI;MACF,OAAO,MAAMD,SAAS,CAAC,CAAC;IAC1B,CAAC,CAAC,OAAOhB,KAAK,EAAE;MACd,IAAIiB,OAAO,GAAG,IAAI,CAAClC,MAAM,CAACO,aAAa,IAAI,IAAI,CAAC4B,WAAW,CAAClB,KAAuB,CAAC,EAAE;QACpF,MAAM,IAAI,CAACmB,KAAK,CAAC,IAAI,CAACpC,MAAM,CAACQ,UAAU,GAAG0B,OAAO,CAAC;QAClD,OAAO,IAAI,CAACF,YAAY,CAACC,SAAS,EAAEC,OAAO,GAAG,CAAC,CAAC;MAClD;MACA,MAAMjB,KAAK;IACb;EACF;;EAEA;AACF;AACA;EACUkB,WAAWA,CAAClB,KAAqB,EAAW;IAClD;IACA,OAAO,CAACA,KAAK,CAACtB,MAAM,IAAKsB,KAAK,CAACtB,MAAM,IAAI,GAAG,IAAIsB,KAAK,CAACtB,MAAM,GAAG,GAAI;EACrE;;EAEA;AACF;AACA;EACUyC,KAAKA,CAACC,EAAU,EAAiB;IACvC,OAAO,IAAInB,OAAO,CAACoB,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAED,EAAE,CAAC,CAAC;EACxD;;EAEA;AACF;AACA;EACE,MAAMG,GAAGA,CAAUC,GAAW,EAAEzC,MAA2B,EAAc;IACvE,MAAMH,QAAQ,GAAG,MAAM,IAAI,CAACmC,YAAY,CAAC,MAAM,IAAI,CAAC/B,aAAa,CAACuC,GAAG,CAAIC,GAAG,EAAEzC,MAAM,CAAC,CAAC;IACtF,OAAOH,QAAQ,CAACiC,IAAI;EACtB;;EAEA;AACF;AACA;EACE,MAAMY,IAAIA,CAAUD,GAAW,EAAEX,IAAU,EAAE9B,MAA2B,EAAc;IACpF,MAAMH,QAAQ,GAAG,MAAM,IAAI,CAACmC,YAAY,CAAC,MAAM,IAAI,CAAC/B,aAAa,CAACyC,IAAI,CAAID,GAAG,EAAEX,IAAI,EAAE9B,MAAM,CAAC,CAAC;IAC7F,OAAOH,QAAQ,CAACiC,IAAI;EACtB;;EAEA;AACF;AACA;EACE,MAAMa,GAAGA,CAAUF,GAAW,EAAEX,IAAU,EAAE9B,MAA2B,EAAc;IACnF,MAAMH,QAAQ,GAAG,MAAM,IAAI,CAACmC,YAAY,CAAC,MAAM,IAAI,CAAC/B,aAAa,CAAC0C,GAAG,CAAIF,GAAG,EAAEX,IAAI,EAAE9B,MAAM,CAAC,CAAC;IAC5F,OAAOH,QAAQ,CAACiC,IAAI;EACtB;;EAEA;AACF;AACA;EACE,MAAMc,KAAKA,CAAUH,GAAW,EAAEX,IAAU,EAAE9B,MAA2B,EAAc;IACrF,MAAMH,QAAQ,GAAG,MAAM,IAAI,CAACmC,YAAY,CAAC,MAAM,IAAI,CAAC/B,aAAa,CAAC2C,KAAK,CAAIH,GAAG,EAAEX,IAAI,EAAE9B,MAAM,CAAC,CAAC;IAC9F,OAAOH,QAAQ,CAACiC,IAAI;EACtB;;EAEA;AACF;AACA;EACE,MAAMe,MAAMA,CAAUJ,GAAW,EAAEzC,MAA2B,EAAc;IAC1E,MAAMH,QAAQ,GAAG,MAAM,IAAI,CAACmC,YAAY,CAAC,MAAM,IAAI,CAAC/B,aAAa,CAAC4C,MAAM,CAAIJ,GAAG,EAAEzC,MAAM,CAAC,CAAC;IACzF,OAAOH,QAAQ,CAACiC,IAAI;EACtB;;EAEA;AACF;AACA;EACEgB,gBAAgBA,CAAA,EAAkB;IAChC,OAAO,IAAI,CAAC7C,aAAa;EAC3B;;EAEA;AACF;AACA;EACE8C,UAAUA,CAAC7C,OAAe,EAAQ;IAChC,IAAI,CAACF,MAAM,CAACE,OAAO,GAAGA,OAAO;IAC7B,IAAI,CAACD,aAAa,CAAC+C,QAAQ,CAAC9C,OAAO,GAAGA,OAAO;EAC/C;;EAEA;AACF;AACA;EACE+C,UAAUA,CAACvC,OAA+B,EAAQ;IAChDwC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAClD,aAAa,CAAC+C,QAAQ,CAACtC,OAAO,EAAEA,OAAO,CAAC;EAC7D;;EAEA;AACF;AACA;EACE0C,kBAAkBA,CAAA,EAAS;IACzB;IACA,IAAI,CAACnD,aAAa,CAAC+C,QAAQ,CAACtC,OAAO,CAAC2C,MAAM,GAAG;MAC3C,cAAc,EAAE;IAClB,CAAC;EACH;AACF;;AAEA;AACA,MAAMC,SAAS,GAAG,IAAIvD,eAAe,CAAC,CAAC;AAEvC,eAAeuD,SAAS;;AAExB;AACA,SAASvD,eAAe;;AAExB;AACA,OAAO,MAAMwD,GAAG,GAAG;EACjBf,GAAG,EAAEA,CAAUC,GAAW,EAAEzC,MAA2B,KAAKsD,SAAS,CAACd,GAAG,CAAIC,GAAG,EAAEzC,MAAM,CAAC;EACzF0C,IAAI,EAAEA,CAAUD,GAAW,EAAEX,IAAU,EAAE9B,MAA2B,KAAKsD,SAAS,CAACZ,IAAI,CAAID,GAAG,EAAEX,IAAI,EAAE9B,MAAM,CAAC;EAC7G2C,GAAG,EAAEA,CAAUF,GAAW,EAAEX,IAAU,EAAE9B,MAA2B,KAAKsD,SAAS,CAACX,GAAG,CAAIF,GAAG,EAAEX,IAAI,EAAE9B,MAAM,CAAC;EAC3G4C,KAAK,EAAEA,CAAUH,GAAW,EAAEX,IAAU,EAAE9B,MAA2B,KAAKsD,SAAS,CAACV,KAAK,CAAIH,GAAG,EAAEX,IAAI,EAAE9B,MAAM,CAAC;EAC/G6C,MAAM,EAAEA,CAAUJ,GAAW,EAAEzC,MAA2B,KAAKsD,SAAS,CAACT,MAAM,CAAIJ,GAAG,EAAEzC,MAAM;AAChG,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}